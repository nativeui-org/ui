{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "description": "An accordion component for React Native applications.",
  "dependencies": [
    "react-native",
    "@expo/vector-icons"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/accordion/accordion.tsx",
      "content": "import * as React from \"react\";\nimport {\n  Pressable,\n  View,\n  Text,\n  LayoutAnimation,\n  Platform,\n  UIManager,\n} from \"react-native\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { cn } from \"@/lib/utils\";\n\n// Enable layout animation for Android\nif (Platform.OS === \"android\") {\n  if (UIManager.setLayoutAnimationEnabledExperimental) {\n    UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n}\n\ninterface AccordionContextValue {\n  value: string[];\n  onValueChange: (itemValue: string) => void;\n  type: \"single\" | \"multiple\";\n}\n\nconst AccordionContext = React.createContext<AccordionContextValue | null>(\n  null\n);\n\nexport interface AccordionProps {\n  type?: \"single\" | \"multiple\";\n  collapsible?: boolean;\n  value?: string[];\n  onValueChange?: (value: string[]) => void;\n  defaultValue?: string[];\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst Accordion = ({\n  type = \"single\",\n  collapsible = false,\n  value,\n  onValueChange,\n  defaultValue,\n  className,\n  children,\n}: AccordionProps) => {\n  const [state, setState] = React.useState<string[]>(\n    value || defaultValue || []\n  );\n\n  const isControlled = value !== undefined;\n  const accordionValue = isControlled ? value : state;\n\n  const handleValueChange = React.useCallback(\n    (itemValue: string) => {\n      const isSelected = accordionValue.includes(itemValue);\n\n      let newValue: string[] = [];\n\n      if (type === \"single\") {\n        if (isSelected) {\n          newValue = collapsible ? [] : [itemValue];\n        } else {\n          newValue = [itemValue];\n        }\n      } else {\n        if (isSelected) {\n          newValue = accordionValue.filter((v) => v !== itemValue);\n        } else {\n          newValue = [...accordionValue, itemValue];\n        }\n      }\n\n      if (!isControlled) {\n        setState(newValue);\n      }\n\n      onValueChange?.(newValue);\n    },\n    [accordionValue, collapsible, isControlled, onValueChange, type]\n  );\n\n  return (\n    <AccordionContext.Provider\n      value={{ value: accordionValue, onValueChange: handleValueChange, type }}\n    >\n      <View className={cn(\"w-full\", className)}>{children}</View>\n    </AccordionContext.Provider>\n  );\n};\n\ninterface AccordionItemProps {\n  value: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst AccordionItem = ({ value, className, children }: AccordionItemProps) => {\n  const context = React.useContext(AccordionContext);\n\n  if (!context) {\n    throw new Error(\"AccordionItem must be used within an Accordion\");\n  }\n\n  const isExpanded = context.value.includes(value);\n\n  return (\n    <View className={cn(\"border-b border-border\", className)}>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child as React.ReactElement<any>, {\n            value,\n            isExpanded,\n          });\n        }\n        return child;\n      })}\n    </View>\n  );\n};\n\ninterface AccordionTriggerProps {\n  className?: string;\n  children: React.ReactNode;\n  value?: string;\n  isExpanded?: boolean;\n}\n\nconst AccordionTrigger = ({\n  className,\n  children,\n  value,\n  isExpanded,\n}: AccordionTriggerProps) => {\n  const context = React.useContext(AccordionContext);\n\n  if (!context || value === undefined) {\n    return null;\n  }\n\n  const iconRotation = isExpanded ? 180 : 0;\n\n  const handlePress = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n    context.onValueChange(value);\n  };\n\n  return (\n    <Pressable\n      onPress={handlePress}\n      className={cn(\"flex-row items-center justify-between py-4\", className)}\n      accessibilityRole=\"button\"\n      accessibilityState={{ expanded: isExpanded }}\n      accessibilityHint=\"Toggle accordion section\"\n    >\n      <View className=\"flex-1\">\n        {typeof children === \"string\" ? (\n          <Text className=\"text-base font-medium text-foreground\">\n            {children}\n          </Text>\n        ) : (\n          children\n        )}\n      </View>\n      <View style={{ transform: [{ rotate: `${iconRotation}deg` }] }}>\n        <Feather name=\"chevron-down\" size={20} color=\"#888\" />\n      </View>\n    </Pressable>\n  );\n};\n\ninterface AccordionContentProps {\n  className?: string;\n  children: React.ReactNode;\n  value?: string;\n  isExpanded?: boolean;\n}\n\nconst AccordionContent = ({\n  className,\n  children,\n  value,\n  isExpanded,\n}: AccordionContentProps) => {\n  if (!isExpanded) {\n    return null;\n  }\n\n  return (\n    <View className={cn(\"pb-4 pt-0\", className)}>\n      {typeof children === \"string\" ? (\n        <Text className=\"text-base text-muted-foreground\">{children}</Text>\n      ) : (\n        children\n      )}\n    </View>\n  );\n};\n\nAccordion.displayName = \"Accordion\";\nAccordionItem.displayName = \"AccordionItem\";\nAccordionTrigger.displayName = \"AccordionTrigger\";\nAccordionContent.displayName = \"AccordionContent\";\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui"
    }
  ]
}