{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-otp",
  "type": "registry:ui",
  "title": "Input OTP",
  "description": "An input OTP component for React Native applications.",
  "dependencies": [
    "react-native"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/input-otp/input-otp.tsx",
      "content": "import * as React from \"react\"\nimport { View, Text, Pressable, TextInput, Platform } from \"react-native\"\nimport { cn } from \"@/lib/utils\"\n\ninterface OTPContextType {\n  value: string\n  setValue: React.Dispatch<React.SetStateAction<string>>\n  maxLength: number\n  onFocus: (index: number) => void\n  focusedIndex: number | null\n  otpCodeRef: React.MutableRefObject<string[]>\n  inputRef: React.RefObject<TextInput>\n}\n\nconst OTPContext = React.createContext<OTPContextType | undefined>(undefined)\n\nexport interface InputOTPProps {\n  value: string\n  onChange: (value: string) => void\n  maxLength: number\n  containerClassName?: string\n  className?: string\n  children: React.ReactNode\n}\n\nexport const InputOTP = React.forwardRef<View, InputOTPProps>(\n  ({ maxLength, value, onChange, containerClassName, className, children }, ref) => {\n    const [focusedIndex, setFocusedIndex] = React.useState<number | null>(null)\n    const otpCodeRef = React.useRef<string[]>(value.split(\"\"))\n    const inputRef = React.useRef<TextInput>(null)\n\n    React.useEffect(() => {\n      otpCodeRef.current = value.split(\"\")\n    }, [value])\n\n    const setValue = React.useCallback((newValue: React.SetStateAction<string>) => {\n      const updatedValue = typeof newValue === \"function\" ? newValue(value) : newValue\n      onChange(updatedValue.slice(0, maxLength))\n    }, [value, onChange, maxLength])\n\n    const onFocus = React.useCallback((index: number) => {\n      setFocusedIndex(index)\n      // Focus the hidden input to trigger keyboard\n      if (inputRef.current) {\n        inputRef.current.focus()\n      }\n    }, [])\n\n    const handleKeyPress = (text: string) => {\n      if (!text) return\n\n      if (focusedIndex !== null && focusedIndex < maxLength) {\n        const newValue = [...otpCodeRef.current]\n\n        if (text.length === 1) {\n          newValue[focusedIndex] = text\n          setValue(newValue.join(\"\"))\n\n          if (focusedIndex < maxLength - 1) {\n            setFocusedIndex(focusedIndex + 1)\n          }\n        }\n        // If pasting multiple characters, fill in slots starting from focused index\n        else {\n          const chars = text.split(\"\")\n          for (let i = 0; i < chars.length && focusedIndex + i < maxLength; i++) {\n            newValue[focusedIndex + i] = chars[i]\n          }\n          setValue(newValue.join(\"\"))\n\n          // Move focus to last filled position or end\n          const newFocusIndex = Math.min(focusedIndex + chars.length, maxLength - 1)\n          setFocusedIndex(newFocusIndex)\n        }\n      }\n    }\n\n    const handleBackspace = () => {\n      if (focusedIndex !== null) {\n        const newValue = [...otpCodeRef.current]\n\n        // If current slot is empty, move focus back and clear that slot\n        if (!newValue[focusedIndex] && focusedIndex > 0) {\n          setFocusedIndex(focusedIndex - 1)\n          newValue[focusedIndex - 1] = \"\"\n        } else {\n          // Otherwise clear current slot\n          newValue[focusedIndex] = \"\"\n        }\n\n        setValue(newValue.join(\"\"))\n      }\n    }\n\n    return (\n      <OTPContext.Provider\n        value={{\n          value,\n          setValue,\n          maxLength,\n          onFocus,\n          focusedIndex,\n          otpCodeRef,\n          inputRef\n        }}\n      >\n        <View\n          ref={ref}\n          className={cn(\n            \"flex flex-row items-center justify-center relative\",\n            containerClassName\n          )}\n        >\n          {children}\n          <TextInput\n            ref={inputRef}\n            className=\"absolute opacity-0 h-px w-px\"\n            keyboardType=\"number-pad\"\n            textContentType=\"oneTimeCode\"\n            value=\"\"\n            onChangeText={handleKeyPress}\n            onKeyPress={({ nativeEvent }) => {\n              if (nativeEvent.key === 'Backspace') {\n                handleBackspace()\n              }\n            }}\n            maxLength={maxLength}\n            caretHidden\n            selectTextOnFocus={false}\n            contextMenuHidden={true}\n          />\n        </View>\n      </OTPContext.Provider>\n    )\n  }\n)\n\nInputOTP.displayName = \"InputOTP\"\n\nexport interface InputOTPGroupProps {\n  className?: string\n  children: React.ReactNode\n}\n\nexport const InputOTPGroup = React.forwardRef<View, InputOTPGroupProps>(\n  ({ className, children }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"flex flex-row items-center\", className)}\n    >\n      {children}\n    </View>\n  )\n)\n\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nexport interface InputOTPSlotProps {\n  index: number\n  className?: string\n}\n\nexport const InputOTPSlot = React.forwardRef<View, InputOTPSlotProps>(\n  ({ index, className }, ref) => {\n    const context = React.useContext(OTPContext)\n\n    if (!context) {\n      throw new Error(\"InputOTPSlot must be used within an InputOTP\")\n    }\n\n    const { value, onFocus, focusedIndex, inputRef } = context\n\n    const char = value[index] || \"\"\n    const isActive = focusedIndex === index\n\n    const handlePress = () => {\n      onFocus(index)\n    }\n\n    return (\n      <Pressable onPress={handlePress}>\n        <View\n          ref={ref}\n          className={cn(\n            \"relative flex h-14 w-14 items-center justify-center border border-input rounded-md bg-background text-lg\",\n            \"shadow-sm mx-1\",\n            isActive ? \"border-primary z-10\" : \"\",\n            Platform.OS === \"ios\" ? \"ios:shadow-sm ios:shadow-foreground/10\" : \"android:elevation-1\",\n            className\n          )}\n        >\n          <Text className=\"text-center text-foreground text-xl font-medium\">\n            {char}\n          </Text>\n          {isActive && !char && (\n            <View className=\"absolute h-6 w-0.5 bg-foreground animate-pulse\" />\n          )}\n        </View>\n      </Pressable>\n    )\n  }\n)\n\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nexport interface InputOTPSeparatorProps {\n  className?: string\n}\n\nexport const InputOTPSeparator = React.forwardRef<View, InputOTPSeparatorProps>(\n  ({ className }, ref) => (\n    <View ref={ref} className={cn(\"px-2\", className)}>\n      <View className=\"h-0.5 w-4 bg-muted-foreground\" />\n    </View>\n  )\n)\n\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport function useOTPInput(maxLength: number) {\n  const [otp, setOtp] = React.useState(\"\")\n\n  const handleChange = React.useCallback((value: string) => {\n    // Only accept numbers\n    const cleaned = value.replace(/[^0-9]/g, \"\")\n    // Limit to maxLength\n    const limited = cleaned.slice(0, maxLength)\n    setOtp(limited)\n  }, [maxLength])\n\n  return {\n    value: otp,\n    setValue: handleChange,\n    isComplete: otp.length === maxLength,\n    isValid: otp.length === maxLength,\n    clear: () => setOtp(\"\")\n  }\n}\n",
      "type": "registry:ui"
    }
  ]
}