{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "title": "Calendar",
  "description": "A calendar component for React Native applications.",
  "dependencies": [
    "react-native",
    "date-fns",
    "@expo/vector-icons",
    "@react-native-community/datetimepicker"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/calendar/calendar.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  Dimensions,\n  Platform,\n  Modal,\n  Animated,\n} from \"react-native\";\nimport { cn } from \"@/lib/utils\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport {\n  startOfMonth,\n  endOfMonth,\n  eachDayOfInterval,\n  isSameDay,\n  isSameMonth,\n  isToday,\n  format,\n  addMonths,\n  subMonths,\n  isWithinInterval,\n  isBefore,\n  isAfter,\n  setHours,\n  setMinutes,\n  startOfDay,\n  endOfDay,\n  getMonth,\n} from \"date-fns\";\nimport { enUS } from \"date-fns/locale\";\n\nconst MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst WEEKDAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\ninterface DateRange {\n  from: Date;\n  to: Date;\n}\n\ninterface TimeConfig {\n  minuteInterval?: 1 | 5 | 10 | 15 | 30;\n  minTime?: string; // format \"HH:mm\"\n  maxTime?: string; // format \"HH:mm\"\n  disabledTimes?: string[]; // format [\"HH:mm\"]\n}\n\ninterface CalendarProps {\n  mode?: \"single\" | \"range\" | \"datetime\";\n  selected?: Date | Date[] | DateRange;\n  onSelect?: (date: Date | Date[] | DateRange | undefined) => void;\n  className?: string;\n  showOutsideDays?: boolean;\n  showTime?: boolean;\n  disabled?: (date: Date) => boolean;\n  disableWeekends?: boolean;\n  fromDate?: Date;\n  toDate?: Date;\n  timeConfig?: TimeConfig;\n  firstDayOfWeek?: 0 | 1; // 0 for Sunday, 1 for Monday\n  enableQuickMonthYear?: boolean;\n}\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\nconst DAY_SIZE = Math.min(Math.floor((SCREEN_WIDTH - 48) / 7), 50);\n\nconst isDateRange = (value: any): value is DateRange => {\n  return value && typeof value === \"object\" && \"from\" in value && \"to\" in value;\n};\n\nconst isInRange = (date: Date, range: DateRange) => {\n  return isWithinInterval(date, { start: range.from, end: range.to });\n};\n\nconst isRangeStart = (date: Date, range: DateRange) => {\n  return isSameDay(date, range.from);\n};\n\nconst isRangeEnd = (date: Date, range: DateRange) => {\n  return isSameDay(date, range.to);\n};\n\nconst CalendarHeader = React.memo(\n  ({\n    currentDate,\n    onPrevMonth,\n    onNextMonth,\n    onHeaderPress,\n    enableQuickMonthYear,\n  }: {\n    currentDate: Date;\n    onPrevMonth: () => void;\n    onNextMonth: () => void;\n    onHeaderPress?: () => void;\n    enableQuickMonthYear?: boolean;\n  }) => (\n    <View className=\"flex-row items-center justify-between mb-4\">\n      <Pressable\n        onPress={onPrevMonth}\n        className=\"p-2 rounded-full bg-muted active:scale-90 transition-transform\"\n      >\n        <Ionicons name=\"chevron-back\" size={24} color=\"#666\" />\n      </Pressable>\n\n      {enableQuickMonthYear ? (\n        <Pressable\n          onPress={onHeaderPress}\n          className=\"flex-row items-center space-x-1 px-3 py-2 rounded-lg active:bg-muted\"\n        >\n          <Text className=\"text-xl font-semibold text-foreground\">\n            {format(currentDate, \"MMMM yyyy\", { locale: enUS })}\n          </Text>\n          <Ionicons name=\"chevron-down\" size={20} color=\"#666\" />\n        </Pressable>\n      ) : (\n        <Text className=\"text-xl font-semibold text-foreground\">\n          {format(currentDate, \"MMMM yyyy\", { locale: enUS })}\n        </Text>\n      )}\n\n      <Pressable\n        onPress={onNextMonth}\n        className=\"p-2 rounded-full bg-muted active:scale-90 transition-transform\"\n      >\n        <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\n      </Pressable>\n    </View>\n  )\n);\n\nconst WeekdaysRow = React.memo(\n  ({ orderedWeekdays }: { orderedWeekdays: string[] }) => (\n    <View className=\"flex-row justify-between mb-2\">\n      {orderedWeekdays.map((day) => (\n        <View\n          key={day}\n          style={{ width: DAY_SIZE }}\n          className=\"items-center justify-center\"\n        >\n          <Text className=\"text-sm font-medium text-muted-foreground\">\n            {day}\n          </Text>\n        </View>\n      ))}\n    </View>\n  )\n);\n\nconst CalendarDay = React.memo(\n  ({\n    date,\n    currentDate,\n    mode,\n    selected,\n    isSelected,\n    isDisabled,\n    onPress,\n  }: {\n    date: Date;\n    currentDate: Date;\n    mode: \"single\" | \"range\" | \"datetime\";\n    selected: Date | Date[] | DateRange | undefined;\n    isSelected: boolean;\n    isDisabled: boolean;\n    onPress: () => void;\n  }) => {\n    const isCurrentMonth = isSameMonth(date, currentDate);\n    const isTodayDate = isToday(date);\n\n    let rangeStyles = \"\";\n    if (mode === \"range\" && selected && isDateRange(selected)) {\n      const isInCurrentRange = isInRange(date, selected);\n      const isStart = isRangeStart(date, selected);\n      const isEnd = isRangeEnd(date, selected);\n\n      if (isInCurrentRange) {\n        rangeStyles = \"bg-primary/20\";\n      }\n      if (isStart) {\n        rangeStyles += \" rounded-l-lg\";\n      }\n      if (isEnd) {\n        rangeStyles += \" rounded-r-lg\";\n      }\n      if (isStart || isEnd) {\n        rangeStyles += \" bg-primary\";\n      }\n    }\n\n    return (\n      <Pressable\n        onPress={onPress}\n        disabled={isDisabled}\n        style={{ width: DAY_SIZE, height: DAY_SIZE }}\n        className={cn(\n          \"items-center justify-center\",\n          mode !== \"range\" && isSelected && \"bg-primary rounded-lg\",\n          mode !== \"range\" &&\n            isTodayDate &&\n            !isSelected &&\n            \"bg-accent rounded-lg\",\n          isDisabled && \"opacity-50\",\n          rangeStyles\n        )}\n      >\n        <Text\n          className={cn(\n            \"text-base\",\n            (isSelected &&\n              mode === \"range\" &&\n              isDateRange(selected) &&\n              (isRangeStart(date, selected) || isRangeEnd(date, selected))) ||\n              (isSelected && mode !== \"range\")\n              ? \"text-primary-foreground\"\n              : !isCurrentMonth\n              ? \"text-muted-foreground\"\n              : \"text-foreground\",\n            isDisabled && \"opacity-50\"\n          )}\n        >\n          {format(date, \"d\")}\n        </Text>\n      </Pressable>\n    );\n  }\n);\n\nconst TimeSelector = React.memo(\n  ({\n    selectedDate,\n    showTimePicker,\n    onToggleTimePicker,\n  }: {\n    selectedDate: Date;\n    showTimePicker: boolean;\n    onToggleTimePicker: () => void;\n  }) => (\n    <View className=\"px-4 pb-4\">\n      <Pressable\n        onPress={onToggleTimePicker}\n        className=\"flex-row items-center justify-between bg-muted/50 rounded-xl p-4\"\n      >\n        <View className=\"flex-row items-center\">\n          <View className=\"bg-primary/10 p-2 rounded-full mr-4\">\n            <Ionicons name=\"time-outline\" size={22} color=\"#666\" />\n          </View>\n          <Text className=\"text-base font-medium text-foreground\">\n            {format(selectedDate, \"HH:mm\")}\n          </Text>\n        </View>\n        <View className=\"flex-row items-center space-x-2\">\n          <Text className=\"text-sm text-muted-foreground\">\n            {showTimePicker ? \"Tap to close\" : \"Tap to change\"}\n          </Text>\n          <Ionicons\n            name={showTimePicker ? \"chevron-down\" : \"chevron-forward\"}\n            size={16}\n            color=\"#666\"\n          />\n        </View>\n      </Pressable>\n    </View>\n  )\n);\n\nconst MonthYearPickerHeader = React.memo(\n  ({\n    activeTab,\n    setActiveTab,\n    onClose,\n  }: {\n    activeTab: \"month\" | \"year\";\n    setActiveTab: (tab: \"month\" | \"year\") => void;\n    onClose: () => void;\n  }) => (\n    <View className=\"border-b border-border\">\n      <View className=\"flex-row justify-between items-center px-4 py-3\">\n        <Pressable onPress={onClose} className=\"opacity-60 active:opacity-100\">\n          <Text className=\"text-primary text-base\">Cancel</Text>\n        </Pressable>\n        <Text className=\"text-lg font-semibold text-foreground\">\n          {activeTab === \"month\" ? \"Select month\" : \"Select year\"}\n        </Text>\n        <Pressable onPress={onClose} className=\"opacity-60 active:opacity-100\">\n          <Text className=\"text-primary font-semibold text-base\">Done</Text>\n        </Pressable>\n      </View>\n    </View>\n  )\n);\n\nconst MonthPicker = React.memo(\n  ({\n    currentDate,\n    onMonthSelect,\n    onYearChange,\n    onTabChange,\n    fromDate,\n    toDate,\n  }: {\n    currentDate: Date;\n    onMonthSelect: (month: number) => void;\n    onYearChange: (year: number) => void;\n    onTabChange: () => void;\n    fromDate?: Date;\n    toDate?: Date;\n  }) => {\n    const currentYear = currentDate.getFullYear();\n    const isPrevYearDisabled =\n      fromDate && currentYear <= fromDate.getFullYear();\n    const isNextYearDisabled = toDate && currentYear >= toDate.getFullYear();\n\n    return (\n      <View className=\"py-4\">\n        <View className=\"px-4 mb-6\">\n          <View className=\"flex-row justify-between items-center mb-4\">\n            <Pressable\n              onPress={() => onYearChange(currentYear - 1)}\n              disabled={isPrevYearDisabled}\n              className={cn(\n                \"p-2 rounded-full bg-muted active:scale-90 transition-transform\",\n                isPrevYearDisabled && \"opacity-50\"\n              )}\n            >\n              <Ionicons name=\"chevron-back\" size={24} color=\"#666\" />\n            </Pressable>\n\n            <Pressable\n              onPress={onTabChange}\n              className=\"flex-row items-center px-4 py-2 rounded-lg bg-muted/50 active:opacity-60\"\n            >\n              <Text className=\"text-xl font-semibold text-foreground\">\n                {currentYear}\n              </Text>\n              <View className=\"ml-2\">\n                <Ionicons name=\"chevron-forward\" size={20} color=\"#666\" />\n              </View>\n            </Pressable>\n\n            <Pressable\n              onPress={() => onYearChange(currentYear + 1)}\n              disabled={isNextYearDisabled}\n              className={cn(\n                \"p-2 rounded-full bg-muted active:scale-90 transition-transform\",\n                isNextYearDisabled && \"opacity-50\"\n              )}\n            >\n              <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\n            </Pressable>\n          </View>\n          <View className=\"flex-row flex-wrap justify-between\">\n            {MONTHS.map((month, index) => {\n              const isDisabled =\n                (fromDate &&\n                  currentYear === fromDate.getFullYear() &&\n                  index < fromDate.getMonth()) ||\n                (toDate &&\n                  currentYear === toDate.getFullYear() &&\n                  index > toDate.getMonth());\n\n              return (\n                <Pressable\n                  key={month}\n                  onPress={() => onMonthSelect(index)}\n                  disabled={isDisabled}\n                  className={cn(\n                    \"w-[30%] py-3 rounded-lg mb-3 active:scale-95 transition-transform\",\n                    getMonth(currentDate) === index\n                      ? \"bg-primary\"\n                      : \"bg-muted/50\",\n                    isDisabled && \"opacity-50\"\n                  )}\n                >\n                  <Text\n                    className={cn(\n                      \"text-base text-center\",\n                      getMonth(currentDate) === index\n                        ? \"text-primary-foreground font-medium\"\n                        : \"text-foreground\",\n                      isDisabled && \"opacity-50\"\n                    )}\n                  >\n                    {month}\n                  </Text>\n                </Pressable>\n              );\n            })}\n          </View>\n        </View>\n      </View>\n    );\n  }\n);\n\nconst YearPicker = React.memo(\n  ({\n    currentDate,\n    onYearSelect,\n    onYearNavigate,\n    fromDate,\n    toDate,\n  }: {\n    currentDate: Date;\n    onYearSelect: (year: number) => void;\n    onYearNavigate: (year: number) => void;\n    fromDate?: Date;\n    toDate?: Date;\n  }) => {\n    const startYear = currentDate.getFullYear() - 10;\n    const years = Array.from({ length: 20 }, (_, i) => startYear + i);\n\n    const minYear = fromDate ? fromDate.getFullYear() : undefined;\n    const maxYear = toDate ? toDate.getFullYear() : undefined;\n    const isPrevDisabled = minYear !== undefined && startYear - 20 < minYear;\n    const isNextDisabled = maxYear !== undefined && startYear + 20 > maxYear;\n\n    return (\n      <View className=\"py-4\">\n        <View className=\"px-4\">\n          <View className=\"flex-row justify-between items-center mb-4\">\n            <Pressable\n              onPress={() => onYearNavigate(startYear - 20)}\n              disabled={isPrevDisabled}\n              className={cn(\n                \"p-2 rounded-full bg-muted active:scale-90 transition-transform\",\n                isPrevDisabled && \"opacity-50\"\n              )}\n            >\n              <Ionicons name=\"chevron-back\" size={24} color=\"#666\" />\n            </Pressable>\n            <Text className=\"text-xl font-semibold text-foreground\">\n              {`${startYear} - ${startYear + 19}`}\n            </Text>\n            <Pressable\n              onPress={() => onYearNavigate(startYear + 20)}\n              disabled={isNextDisabled}\n              className={cn(\n                \"p-2 rounded-full bg-muted active:scale-90 transition-transform\",\n                isNextDisabled && \"opacity-50\"\n              )}\n            >\n              <Ionicons name=\"chevron-forward\" size={24} color=\"#666\" />\n            </Pressable>\n          </View>\n\n          <View className=\"flex-row flex-wrap justify-between\">\n            {years.map((year) => {\n              const isDisabled =\n                (minYear !== undefined && year < minYear) ||\n                (maxYear !== undefined && year > maxYear);\n\n              return (\n                <Pressable\n                  key={year}\n                  onPress={() => onYearSelect(year)}\n                  disabled={isDisabled}\n                  className={cn(\n                    \"w-[23%] py-3 rounded-lg mb-3 active:scale-95 transition-transform\",\n                    currentDate.getFullYear() === year\n                      ? \"bg-primary\"\n                      : \"bg-muted/50\",\n                    isDisabled && \"opacity-50\"\n                  )}\n                >\n                  <Text\n                    className={cn(\n                      \"text-base text-center\",\n                      currentDate.getFullYear() === year\n                        ? \"text-primary-foreground font-medium\"\n                        : \"text-foreground\",\n                      isDisabled && \"opacity-50\"\n                    )}\n                  >\n                    {year}\n                  </Text>\n                </Pressable>\n              );\n            })}\n          </View>\n        </View>\n      </View>\n    );\n  }\n);\n\nexport function Calendar({\n  mode = \"single\",\n  selected,\n  onSelect,\n  className,\n  showOutsideDays = true,\n  showTime = false,\n  disabled,\n  disableWeekends = false,\n  fromDate,\n  toDate,\n  timeConfig,\n  firstDayOfWeek = 1,\n  enableQuickMonthYear = false,\n}: CalendarProps) {\n  const [currentDate, setCurrentDate] = React.useState(() => {\n    if (selected instanceof Date) {\n      return selected;\n    }\n    return new Date();\n  });\n  const [showTimePicker, setShowTimePicker] = React.useState(false);\n  const [showMonthYearPicker, setShowMonthYearPicker] = React.useState(false);\n  const [activeTab, setActiveTab] = React.useState<\"month\" | \"year\">(\"month\");\n  const [tempSelectedDate, setTempSelectedDate] = React.useState<Date | null>(\n    null\n  );\n\n  const fadeAnim = React.useRef(new Animated.Value(0)).current;\n\n  const orderedWeekdays = React.useMemo(() => {\n    const days = [...WEEKDAYS];\n    const firstDays = days.splice(0, firstDayOfWeek);\n    return [...days, ...firstDays];\n  }, [firstDayOfWeek]);\n\n  const getDaysInMonth = React.useCallback(\n    (date: Date) => {\n      const start = startOfMonth(date);\n      const end = endOfMonth(date);\n      const days = eachDayOfInterval({ start, end });\n\n      // Add days from previous month to fill the first week\n      const firstDayOfMonth = (start.getDay() - firstDayOfWeek + 7) % 7;\n      if (showOutsideDays && firstDayOfMonth > 0) {\n        const prevMonthDays = eachDayOfInterval({\n          start: subMonths(start, 1),\n          end: subMonths(end, 1),\n        }).slice(-firstDayOfMonth);\n        days.unshift(...prevMonthDays);\n      }\n\n      // Add days from next month to fill the last week\n      if (showOutsideDays && days.length < 42) {\n        const remainingDays = 42 - days.length;\n        const nextMonthDays = eachDayOfInterval({\n          start: addMonths(start, 1),\n          end: addMonths(end, 1),\n        }).slice(0, remainingDays);\n        days.push(...nextMonthDays);\n      }\n\n      return days;\n    },\n    [firstDayOfWeek, showOutsideDays]\n  );\n\n  const isSelected = React.useCallback(\n    (date: Date) => {\n      if (!selected) return false;\n      if (selected instanceof Date) {\n        return isSameDay(selected, date);\n      }\n      if (Array.isArray(selected)) {\n        return selected.some((s) => isSameDay(s, date));\n      }\n      if (isDateRange(selected)) {\n        return (\n          isSameDay(selected.from, date) ||\n          isSameDay(selected.to, date) ||\n          isWithinInterval(date, { start: selected.from, end: selected.to })\n        );\n      }\n      return false;\n    },\n    [selected]\n  );\n\n  const isDisabled = React.useCallback(\n    (date: Date) => {\n      if (fromDate && isBefore(date, startOfDay(fromDate))) return true;\n      if (toDate && isAfter(date, endOfDay(toDate))) return true;\n      if (typeof disabled === \"function\") return disabled(date);\n      return false;\n    },\n    [fromDate, toDate, disabled]\n  );\n\n  const showPicker = React.useCallback(() => {\n    setShowMonthYearPicker(true);\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [fadeAnim]);\n\n  const hidePicker = React.useCallback(() => {\n    Animated.timing(fadeAnim, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start(() => {\n      setShowMonthYearPicker(false);\n    });\n  }, [fadeAnim]);\n\n  const handleMonthSelect = React.useCallback(\n    (month: number) => {\n      const newDate = new Date(currentDate);\n      newDate.setMonth(month);\n      setCurrentDate(newDate);\n      setShowMonthYearPicker(false);\n    },\n    [currentDate]\n  );\n\n  const handleYearChange = React.useCallback(\n    (year: number) => {\n      const newDate = new Date(currentDate);\n      newDate.setFullYear(year);\n      setCurrentDate(newDate);\n    },\n    [currentDate]\n  );\n\n  const handleYearSelect = React.useCallback(\n    (year: number) => {\n      handleYearChange(year);\n      setActiveTab(\"month\");\n    },\n    [handleYearChange]\n  );\n\n  const handleYearNavigate = React.useCallback(\n    (year: number) => {\n      handleYearChange(year);\n      // Ne pas changer d'onglet, rester en mode année\n    },\n    [handleYearChange]\n  );\n\n  const handleDateSelect = React.useCallback(\n    (date: Date) => {\n      if (isDisabled(date)) return;\n\n      let newSelected: Date | Date[] | DateRange | undefined;\n\n      switch (mode) {\n        case \"single\":\n          newSelected = date;\n          break;\n        case \"range\":\n          if (!selected || !isDateRange(selected)) {\n            newSelected = { from: date, to: date };\n          } else {\n            if (isSameDay(selected.from, selected.to)) {\n              if (isBefore(date, selected.from)) {\n                newSelected = { from: date, to: selected.from };\n              } else {\n                newSelected = { from: selected.from, to: date };\n              }\n            } else {\n              newSelected = { from: date, to: date };\n            }\n          }\n          break;\n        case \"datetime\":\n          setTempSelectedDate(date);\n          if (selected instanceof Date) {\n            const newDate = setMinutes(\n              setHours(date, selected.getHours()),\n              selected.getMinutes()\n            );\n            onSelect?.(newDate);\n          } else {\n            onSelect?.(date);\n          }\n          return;\n        default:\n          newSelected = date;\n      }\n\n      onSelect?.(newSelected);\n    },\n    [mode, selected, onSelect, isDisabled]\n  );\n\n  const handleTimeChange = React.useCallback(\n    (event: any, selectedTime?: Date) => {\n      if (Platform.OS === \"android\") {\n        setShowTimePicker(false);\n        if (event.type === \"dismissed\") return;\n      }\n\n      if (selectedTime && selected instanceof Date) {\n        const newDate = setMinutes(\n          setHours(selected, selectedTime.getHours()),\n          selectedTime.getMinutes()\n        );\n        onSelect?.(newDate);\n      }\n    },\n    [selected, onSelect]\n  );\n\n  const handlePrevMonth = React.useCallback(() => {\n    setCurrentDate(subMonths(currentDate, 1));\n  }, [currentDate]);\n\n  const handleNextMonth = React.useCallback(() => {\n    setCurrentDate(addMonths(currentDate, 1));\n  }, [currentDate]);\n\n  const handleToggleTimePicker = React.useCallback(() => {\n    setShowTimePicker(!showTimePicker);\n  }, [showTimePicker]);\n\n  return (\n    <View className={cn(\"bg-background rounded-2xl\", className)}>\n      <View className=\"p-4\">\n        <CalendarHeader\n          currentDate={currentDate}\n          onPrevMonth={handlePrevMonth}\n          onNextMonth={handleNextMonth}\n          onHeaderPress={showPicker}\n          enableQuickMonthYear={enableQuickMonthYear}\n        />\n\n        <Modal\n          visible={showMonthYearPicker && enableQuickMonthYear}\n          transparent\n          animationType=\"none\"\n          onRequestClose={hidePicker}\n        >\n          <Animated.View\n            style={{\n              flex: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: \"rgba(0, 0, 0, 0.25)\",\n              padding: 16,\n              opacity: fadeAnim,\n            }}\n          >\n            <View\n              style={{\n                backgroundColor: \"white\",\n                borderRadius: 24,\n                overflow: \"hidden\",\n                width: \"90%\",\n                maxWidth: 400,\n              }}\n            >\n              <MonthYearPickerHeader\n                activeTab={activeTab}\n                setActiveTab={setActiveTab}\n                onClose={hidePicker}\n              />\n\n              {activeTab === \"month\" ? (\n                <MonthPicker\n                  currentDate={currentDate}\n                  onMonthSelect={handleMonthSelect}\n                  onYearChange={handleYearChange}\n                  onTabChange={() => setActiveTab(\"year\")}\n                  fromDate={fromDate}\n                  toDate={toDate}\n                />\n              ) : (\n                <YearPicker\n                  currentDate={currentDate}\n                  onYearSelect={handleYearSelect}\n                  onYearNavigate={handleYearNavigate}\n                  fromDate={fromDate}\n                  toDate={toDate}\n                />\n              )}\n            </View>\n          </Animated.View>\n        </Modal>\n\n        <WeekdaysRow orderedWeekdays={orderedWeekdays} />\n\n        <View className=\"flex-row flex-wrap\">\n          {getDaysInMonth(currentDate).map((date, index) => (\n            <CalendarDay\n              key={index}\n              date={date}\n              currentDate={currentDate}\n              mode={mode}\n              selected={selected}\n              isSelected={isSelected(date)}\n              isDisabled={isDisabled(date)}\n              onPress={() => handleDateSelect(date)}\n            />\n          ))}\n        </View>\n      </View>\n\n      {mode === \"datetime\" && selected instanceof Date && (\n        <TimeSelector\n          selectedDate={selected}\n          showTimePicker={showTimePicker}\n          onToggleTimePicker={handleToggleTimePicker}\n        />\n      )}\n\n      {showTimePicker &&\n        selected instanceof Date &&\n        (Platform.OS === \"ios\" ? (\n          <View className=\"px-4 pb-4\">\n            <View className=\"bg-muted rounded-xl overflow-hidden\">\n              <DateTimePicker\n                value={selected}\n                mode=\"time\"\n                is24Hour={true}\n                display=\"spinner\"\n                onChange={handleTimeChange}\n                textColor=\"#000\"\n                minuteInterval={timeConfig?.minuteInterval}\n                locale=\"en\"\n              />\n            </View>\n          </View>\n        ) : (\n          <DateTimePicker\n            value={selected}\n            mode=\"time\"\n            is24Hour={true}\n            display=\"default\"\n            onChange={handleTimeChange}\n            minuteInterval={timeConfig?.minuteInterval}\n            locale=\"en\"\n          />\n        ))}\n    </View>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}