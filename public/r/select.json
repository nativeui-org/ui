{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:component",
  "title": "Select",
  "description": "A select component for React Native applications.",
  "dependencies": [
    "react-native",
    "@expo/vector-icons"
  ],
  "registryDependencies": [
    "https://nativeui.io/registry/drawer.json"
  ],
  "files": [
    {
      "path": "registry/select/select.tsx",
      "content": "import * as React from \"react\";\nimport { View, Text, Pressable, ScrollView, Platform } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { cn } from \"@/lib/utils\";\nimport { Drawer, useDrawer } from \"@/components/ui/drawer\";\n\ninterface SelectProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n  children: React.ReactNode;\n}\n\ninterface SelectItemProps {\n  value: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n  className?: string;\n  onSelect?: (value: string, label: React.ReactNode) => void;\n  selectedValue?: string;\n}\n\ninterface SelectLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface SelectGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface SelectSeparatorProps {\n  className?: string;\n}\n\nconst Select = React.forwardRef<View, SelectProps>(\n  (\n    {\n      value,\n      onValueChange,\n      placeholder,\n      disabled = false,\n      className,\n      triggerClassName,\n      contentClassName,\n      children,\n    },\n    ref\n  ) => {\n    const [open, setOpen] = React.useState(false);\n    const [selectedValue, setSelectedValue] = React.useState(value);\n    const [selectedLabel, setSelectedLabel] =\n      React.useState<React.ReactNode>(\"\");\n\n    React.useEffect(() => {\n      if (value === undefined) return;\n\n      React.Children.forEach(children, (child) => {\n        if (!React.isValidElement(child)) return;\n\n        const childElement = child as React.ReactElement<any>;\n\n        if (\n          childElement.type === SelectItem &&\n          childElement.props.value === value\n        ) {\n          setSelectedLabel(childElement.props.children);\n          setSelectedValue(value);\n          return;\n        }\n\n        if (childElement.type === SelectGroup) {\n          React.Children.forEach(childElement.props.children, (groupChild) => {\n            if (\n              React.isValidElement(groupChild) &&\n              (groupChild as React.ReactElement<any>).type === SelectItem &&\n              (groupChild as React.ReactElement<any>).props.value === value\n            ) {\n              setSelectedLabel(\n                (groupChild as React.ReactElement<any>).props.children\n              );\n              setSelectedValue(value);\n            }\n          });\n        }\n      });\n    }, [value, children]);\n\n    const handleSelect = (value: string, label: React.ReactNode) => {\n      setSelectedValue(value);\n      setSelectedLabel(label);\n      if (onValueChange) {\n        onValueChange(value);\n      }\n\n      setTimeout(() => {\n        setOpen(false);\n      }, 300); // Delay setting open to false until after the animation completes\n    };\n\n    const enhancedChildren = React.Children.map(children, (child) => {\n      if (!React.isValidElement(child)) return child;\n\n      const childElement = child as React.ReactElement<any>;\n\n      if (childElement.type === SelectItem) {\n        return React.cloneElement(childElement, {\n          onSelect: handleSelect,\n          selectedValue,\n        });\n      }\n\n      if (childElement.type === SelectGroup) {\n        const groupChildren = React.Children.map(\n          childElement.props.children,\n          (groupChild) => {\n            if (\n              React.isValidElement(groupChild) &&\n              (groupChild as React.ReactElement<any>).type === SelectItem\n            ) {\n              return React.cloneElement(groupChild as React.ReactElement<any>, {\n                onSelect: handleSelect,\n                selectedValue,\n              });\n            }\n            return groupChild;\n          }\n        );\n        return React.cloneElement(childElement, {}, groupChildren);\n      }\n\n      return child;\n    });\n\n    return (\n      <View ref={ref} className={cn(\"w-full\", className)}>\n        <Pressable\n          disabled={disabled}\n          onPress={() => setOpen(true)}\n          className={cn(\n            \"flex-row h-12 items-center justify-between rounded-md border border-input bg-transparent px-3 py-2\",\n            \"shadow-sm\",\n            \"active:opacity-70\",\n            disabled && \"opacity-50\",\n            Platform.OS === \"ios\"\n              ? \"ios:shadow-sm ios:shadow-foreground/10\"\n              : \"android:elevation-1\",\n            triggerClassName\n          )}\n        >\n          <Text\n            className={cn(\n              \"text-base flex-1\",\n              !selectedValue && \"text-muted-foreground\",\n              \"text-foreground\"\n            )}\n            numberOfLines={1}\n          >\n            {selectedValue ? selectedLabel : placeholder || \"Select an option\"}\n          </Text>\n\n          <Ionicons\n            name=\"chevron-down\"\n            size={16}\n            color=\"#9CA3AF\"\n            style={{ marginLeft: 8, opacity: 0.7 }}\n          />\n        </Pressable>\n\n        <Drawer\n          open={open}\n          onClose={() => setOpen(false)}\n          title={placeholder || \"Select an option\"}\n          snapPoints={[0.5, 0.8]}\n          initialSnapIndex={0}\n          contentClassName={contentClassName}\n        >\n          <ScrollView className=\"px-1 pt-2 pb-6\">{enhancedChildren}</ScrollView>\n        </Drawer>\n      </View>\n    );\n  }\n);\n\nSelect.displayName = \"Select\";\n\nconst SelectGroup = React.forwardRef<View, SelectGroupProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <View ref={ref} className={cn(\"\", className)} {...props}>\n        {children}\n      </View>\n    );\n  }\n);\n\nSelectGroup.displayName = \"SelectGroup\";\n\nconst SelectItem = React.forwardRef<typeof Pressable, SelectItemProps>(\n  (\n    { className, children, value, disabled, onSelect, selectedValue, ...props },\n    ref\n  ) => {\n    const isSelected = selectedValue === value;\n    const drawer = useDrawer();\n\n    return (\n      <Pressable\n        ref={ref as any}\n        disabled={disabled}\n        onPress={() => {\n          if (onSelect) {\n            onSelect(value, children);\n          }\n\n          drawer.animateClose();\n        }}\n        className={cn(\n          \"flex-row h-14 items-center justify-between px-4 py-2 active:bg-accent/50\",\n          isSelected ? \"bg-accent\" : \"\",\n          disabled && \"opacity-50\",\n          className\n        )}\n        {...props}\n      >\n        <Text\n          className={cn(\n            \"text-base\",\n            isSelected\n              ? \"text-accent-foreground font-medium\"\n              : \"text-foreground\"\n          )}\n        >\n          {children}\n        </Text>\n\n        {isSelected && <Ionicons name=\"checkmark\" size={20} color=\"#4F46E5\" />}\n      </Pressable>\n    );\n  }\n);\n\nSelectItem.displayName = \"SelectItem\";\n\nconst SelectLabel = React.forwardRef<Text, SelectLabelProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <Text\n        ref={ref}\n        className={cn(\n          \"px-3 py-2 text-sm font-semibold text-foreground\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Text>\n    );\n  }\n);\n\nSelectLabel.displayName = \"SelectLabel\";\n\nconst SelectSeparator = React.forwardRef<View, SelectSeparatorProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <View\n        ref={ref}\n        className={cn(\"h-px bg-muted mx-2 my-1\", className)}\n        {...props}\n      />\n    );\n  }\n);\n\nSelectSeparator.displayName = \"SelectSeparator\";\n\nexport { Select, SelectGroup, SelectItem, SelectLabel, SelectSeparator };\n",
      "type": "registry:component"
    }
  ]
}