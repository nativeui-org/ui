{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle-group",
  "type": "registry:component",
  "title": "Toggle-group",
  "description": "A toggle-group component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/toggle-group/toggle-group.tsx",
      "content": "import * as React from \"react\";\nimport { View, Pressable, Platform } from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ToggleGroupProps {\n  type?: \"single\" | \"multiple\";\n  value?: string | string[];\n  onValueChange?: (value: string | string[]) => void;\n  disabled?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  variant?: \"default\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\";\n}\n\ninterface ToggleGroupItemProps {\n  value: string;\n  disabled?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  variant?: \"default\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\";\n}\n\nconst ToggleGroupContext = React.createContext<{\n  type: \"single\" | \"multiple\";\n  value: string | string[];\n  onValueChange?: (value: string | string[]) => void;\n  disabled?: boolean;\n  variant?: \"default\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\";\n}>({\n  type: \"single\",\n  value: \"\",\n});\n\nconst ToggleGroup = React.forwardRef<View, ToggleGroupProps>(\n  (\n    {\n      type = \"single\",\n      value,\n      onValueChange,\n      disabled,\n      children,\n      className,\n      variant = \"default\",\n      size = \"default\",\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <ToggleGroupContext.Provider\n        value={{\n          type,\n          value: value || (type === \"single\" ? \"\" : []),\n          onValueChange,\n          disabled,\n          variant,\n          size,\n        }}\n      >\n        <View\n          ref={ref}\n          className={cn(\n            \"flex-row items-center justify-center\",\n            Platform.OS === \"ios\" ? \"gap-2\" : \"gap-1\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </View>\n      </ToggleGroupContext.Provider>\n    );\n  }\n);\n\nToggleGroup.displayName = \"ToggleGroup\";\n\nconst ToggleGroupItem = React.forwardRef<View, ToggleGroupItemProps>(\n  ({ value, disabled, children, className, variant, size, ...props }, ref) => {\n    const context = React.useContext(ToggleGroupContext);\n    const isSelected =\n      context.type === \"single\"\n        ? context.value === value\n        : (context.value as string[]).includes(value);\n\n    const handlePress = () => {\n      if (disabled || context.disabled) return;\n\n      if (context.type === \"single\") {\n        context.onValueChange?.(value);\n      } else {\n        const currentValue = context.value as string[];\n        const newValue = currentValue.includes(value)\n          ? currentValue.filter((v) => v !== value)\n          : [...currentValue, value];\n        context.onValueChange?.(newValue);\n      }\n    };\n\n    const getSizeStyles = () => {\n      const sizeToUse = context.size || size;\n      switch (sizeToUse) {\n        case \"sm\":\n          return Platform.OS === \"ios\" ? \"h-10 px-3\" : \"h-12 px-3\";\n        case \"lg\":\n          return Platform.OS === \"ios\" ? \"h-12 px-4\" : \"h-14 px-4\";\n        default:\n          return Platform.OS === \"ios\" ? \"h-11 px-3.5\" : \"h-13 px-3.5\";\n      }\n    };\n\n    const getVariantStyles = () => {\n      const variantToUse = context.variant || variant;\n      switch (variantToUse) {\n        case \"outline\":\n          return \"border border-input bg-transparent\";\n        default:\n          return \"bg-transparent\";\n      }\n    };\n\n    return (\n      <Pressable\n        ref={ref}\n        onPress={handlePress}\n        disabled={disabled || context.disabled}\n        className={cn(\n          \"flex-row items-center justify-center rounded-lg\",\n          getSizeStyles(),\n          getVariantStyles(),\n          isSelected ? \"bg-accent\" : \"bg-transparent\",\n          isSelected ? \"text-accent-foreground\" : \"text-foreground\",\n          (disabled || context.disabled) && \"opacity-50\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Pressable>\n    );\n  }\n);\n\nToggleGroupItem.displayName = \"ToggleGroupItem\";\n\nexport { ToggleGroup, ToggleGroupItem };\n",
      "type": "registry:component"
    }
  ],
  "changelog": []
}