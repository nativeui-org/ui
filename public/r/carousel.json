{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "title": "Carousel",
  "description": "A carousel component for React Native applications.",
  "dependencies": [
    "react-native",
    "@expo/vector-icons"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/carousel/carousel.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  Dimensions,\n  ScrollView,\n  AccessibilityInfo,\n} from \"react-native\";\nimport { cn } from \"@/lib/utils\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\ntype CarouselContextProps = {\n  scrollViewRef: React.RefObject<ScrollView | null>;\n  currentIndex: number;\n  scrollTo: (index: number) => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n  itemsCount: number;\n  orientation?: \"horizontal\" | \"vertical\";\n};\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n  return context;\n}\n\ninterface CarouselProps {\n  children: React.ReactNode;\n  className?: string;\n  orientation?: \"horizontal\" | \"vertical\";\n  showControls?: boolean;\n  showIndicators?: boolean;\n  autoPlay?: boolean;\n  autoPlayInterval?: number;\n  loop?: boolean;\n  indicatorStyle?: \"dots\" | \"lines\" | \"numbers\";\n  onIndexChange?: (index: number) => void;\n}\n\nconst Carousel = React.forwardRef<View, CarouselProps>(\n  (\n    {\n      children,\n      className,\n      orientation = \"horizontal\",\n      showControls = true,\n      showIndicators = true,\n      autoPlay = false,\n      autoPlayInterval = 3000,\n      loop = true,\n      indicatorStyle = \"dots\",\n      onIndexChange,\n      ...props\n    },\n    ref\n  ) => {\n    const scrollViewRef = React.useRef<ScrollView>(null);\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n    const [itemsCount, setItemsCount] = React.useState(0);\n    const dimensions = {\n      width: Dimensions.get(\"window\").width,\n      height: Dimensions.get(\"window\").height,\n    };\n\n    const canScrollPrev = currentIndex > 0 || loop;\n    const canScrollNext = currentIndex < itemsCount - 1 || loop;\n\n    const scrollTo = React.useCallback(\n      (index: number) => {\n        if (!scrollViewRef.current) return;\n\n        let targetIndex = index;\n        if (index < 0) {\n          targetIndex = loop ? itemsCount - 1 : 0;\n        } else if (index >= itemsCount) {\n          targetIndex = loop ? 0 : itemsCount - 1;\n        }\n\n        const offset =\n          orientation === \"horizontal\"\n            ? targetIndex * dimensions.width\n            : targetIndex * dimensions.height;\n\n        scrollViewRef.current.scrollTo({\n          [orientation === \"horizontal\" ? \"x\" : \"y\"]: offset,\n          animated: true,\n        });\n\n        setCurrentIndex(targetIndex);\n        onIndexChange?.(targetIndex);\n        AccessibilityInfo.announceForAccessibility(\n          `Image ${targetIndex + 1} of ${itemsCount}`\n        );\n      },\n      [orientation, dimensions, itemsCount, onIndexChange, loop]\n    );\n\n    const handleScroll = React.useCallback(\n      (event: any) => {\n        const {\n          nativeEvent: { contentOffset, layoutMeasurement },\n        } = event;\n        const offset =\n          orientation === \"horizontal\" ? contentOffset.x : contentOffset.y;\n        const size =\n          orientation === \"horizontal\"\n            ? layoutMeasurement.width\n            : layoutMeasurement.height;\n        const index = Math.round(offset / size);\n\n        if (index !== currentIndex) {\n          setCurrentIndex(index);\n          onIndexChange?.(index);\n        }\n      },\n      [orientation, currentIndex, onIndexChange]\n    );\n\n    React.useEffect(() => {\n      if (autoPlay && canScrollNext) {\n        const interval = setInterval(() => {\n          if (currentIndex < itemsCount - 1) {\n            scrollTo(currentIndex + 1);\n          } else if (loop) {\n            scrollTo(0);\n          }\n        }, autoPlayInterval);\n\n        return () => clearInterval(interval);\n      }\n    }, [currentIndex, autoPlay, autoPlayInterval, loop, itemsCount, scrollTo]);\n\n    const renderIndicator = () => {\n      switch (indicatorStyle) {\n        case \"lines\":\n          return (\n            <View\n              className={cn(\n                \"absolute flex-row justify-center items-center gap-1.5 z-10\",\n                orientation === \"horizontal\"\n                  ? \"bottom-4 left-0 right-0\"\n                  : \"right-4 top-1/2 -translate-y-1/2 flex-col\"\n              )}\n              style={{\n                shadowColor: \"#000\",\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.25,\n                shadowRadius: 3.84,\n                elevation: 5,\n              }}\n            >\n              {Array.from({ length: itemsCount }).map((_, index) => (\n                <Pressable\n                  key={index}\n                  onPress={() => scrollTo(index)}\n                  accessibilityRole=\"button\"\n                  accessibilityLabel={`Go to image ${index + 1}`}\n                  accessibilityState={{ selected: currentIndex === index }}\n                  style={[\n                    {\n                      height: orientation === \"horizontal\" ? 2 : 16,\n                      width:\n                        orientation === \"horizontal\"\n                          ? currentIndex === index\n                            ? 16\n                            : 8\n                          : 2,\n                      borderRadius: 2,\n                      backgroundColor:\n                        currentIndex === index\n                          ? \"#3b82f6\"\n                          : \"rgba(255, 255, 255, 0.5)\",\n                    },\n                  ]}\n                />\n              ))}\n            </View>\n          );\n        case \"numbers\":\n          return (\n            <View\n              className={cn(\n                \"absolute bg-black/50 px-2.5 py-1.5 rounded-full z-10\",\n                orientation === \"horizontal\"\n                  ? \"bottom-4 right-4\"\n                  : \"right-4 top-4\"\n              )}\n              style={{\n                shadowColor: \"#000\",\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.25,\n                shadowRadius: 3.84,\n                elevation: 5,\n              }}\n            >\n              <Text className=\"text-white text-sm font-medium\">\n                {currentIndex + 1} / {itemsCount}\n              </Text>\n            </View>\n          );\n        default:\n          return (\n            <View\n              className={cn(\n                \"absolute flex-row justify-center items-center gap-2 z-10\",\n                orientation === \"horizontal\"\n                  ? \"bottom-4 left-0 right-0\"\n                  : \"right-4 top-1/2 -translate-y-1/2 flex-col\"\n              )}\n              style={{\n                shadowColor: \"#000\",\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.25,\n                shadowRadius: 3.84,\n                elevation: 5,\n              }}\n            >\n              {Array.from({ length: itemsCount }).map((_, index) => (\n                <Pressable\n                  key={index}\n                  onPress={() => scrollTo(index)}\n                  accessibilityRole=\"button\"\n                  accessibilityLabel={`Go to image ${index + 1}`}\n                  accessibilityState={{ selected: currentIndex === index }}\n                  style={[\n                    {\n                      width: 8,\n                      height: 8,\n                      borderRadius: 4,\n                      transform: [{ scale: currentIndex === index ? 1.25 : 1 }],\n                      backgroundColor:\n                        currentIndex === index\n                          ? \"#3b82f6\"\n                          : \"rgba(255, 255, 255, 0.5)\",\n                    },\n                  ]}\n                />\n              ))}\n            </View>\n          );\n      }\n    };\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          scrollViewRef,\n          currentIndex,\n          scrollTo,\n          canScrollPrev,\n          canScrollNext,\n          itemsCount,\n          orientation,\n        }}\n      >\n        <View\n          ref={ref}\n          className={cn(\"relative\", className)}\n          {...props}\n          style={{ width: dimensions.width }}\n          accessibilityRole=\"tablist\"\n          accessibilityLabel=\"Image carousel\"\n        >\n          <ScrollView\n            ref={scrollViewRef}\n            horizontal={orientation === \"horizontal\"}\n            showsHorizontalScrollIndicator={false}\n            showsVerticalScrollIndicator={false}\n            pagingEnabled\n            onScroll={handleScroll}\n            scrollEventThrottle={16}\n            onContentSizeChange={(w, h) => {\n              setItemsCount(\n                Math.ceil(\n                  (orientation === \"horizontal\" ? w : h) /\n                  (orientation === \"horizontal\"\n                    ? dimensions.width\n                    : dimensions.height)\n                )\n              );\n            }}\n          >\n            {children}\n          </ScrollView>\n\n          {showControls && (\n            <>\n              <CarouselPrevious />\n              <CarouselNext />\n            </>\n          )}\n\n          {showIndicators && renderIndicator()}\n        </View>\n      </CarouselContext.Provider>\n    );\n  }\n);\n\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<\n  View,\n  React.ComponentProps<typeof View>\n>(({ className, children, ...props }, ref) => {\n  const { orientation } = useCarousel();\n\n  return (\n    <View\n      ref={ref}\n      className={cn(\n        \"flex\",\n        orientation === \"horizontal\" ? \"flex-row\" : \"flex-col\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </View>\n  );\n});\n\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<View, React.ComponentProps<typeof View>>(\n  ({ className, children, ...props }, ref) => {\n    const { orientation } = useCarousel();\n    const dimensions = Dimensions.get(\"window\");\n\n    return (\n      <View\n        ref={ref}\n        className={cn(\"flex-1\", className)}\n        style={{\n          width: orientation === \"horizontal\" ? dimensions.width : \"100%\",\n          height: orientation === \"vertical\" ? dimensions.height : \"100%\",\n        }}\n        accessibilityRole=\"tab\"\n        {...props}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<\n  View,\n  React.ComponentProps<typeof View>\n>(({ className, ...props }, ref) => {\n  const { scrollTo, currentIndex, canScrollPrev, orientation } = useCarousel();\n\n  if (!canScrollPrev) return null;\n\n  return (\n    <Pressable\n      onPress={() => scrollTo(currentIndex - 1)}\n      className={cn(\n        \"absolute z-10 p-3 rounded-full bg-background/50 backdrop-blur-sm\",\n        orientation === \"horizontal\"\n          ? \"left-4 top-1/2 -translate-y-1/2\"\n          : \"left-1/2 -translate-x-1/2 top-4\",\n        className\n      )}\n      accessibilityRole=\"button\"\n      accessibilityLabel=\"Previous image\"\n      {...props}\n    >\n      <Ionicons\n        name={orientation === \"horizontal\" ? \"chevron-back\" : \"chevron-up\"}\n        size={28}\n        color=\"#000\"\n      />\n    </Pressable>\n  );\n});\n\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<View, React.ComponentProps<typeof View>>(\n  ({ className, ...props }, ref) => {\n    const { scrollTo, currentIndex, canScrollNext, orientation } =\n      useCarousel();\n\n    if (!canScrollNext) return null;\n\n    return (\n      <Pressable\n        onPress={() => scrollTo(currentIndex + 1)}\n        className={cn(\n          \"absolute z-10 p-3 rounded-full bg-background/50 backdrop-blur-sm\",\n          orientation === \"horizontal\"\n            ? \"right-4 top-1/2 -translate-y-1/2\"\n            : \"left-1/2 -translate-x-1/2 bottom-4\",\n          className\n        )}\n        accessibilityRole=\"button\"\n        accessibilityLabel=\"Next image\"\n        {...props}\n      >\n        <Ionicons\n          name={\n            orientation === \"horizontal\" ? \"chevron-forward\" : \"chevron-down\"\n          }\n          size={28}\n          color=\"#000\"\n        />\n      </Pressable>\n    );\n  }\n);\n\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  type CarouselProps,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n",
      "type": "registry:ui"
    }
  ]
}