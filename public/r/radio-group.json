{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-group",
  "type": "registry:ui",
  "title": "Radio Group",
  "description": "A radio group component for React Native applications.",
  "dependencies": [
    "react-native"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/radio-group/radio-group.tsx",
      "content": "import * as React from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RadioGroupRootProps\n  extends React.ComponentPropsWithoutRef<typeof View> {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n}\n\ninterface RadioGroupItemProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof Pressable>, \"children\"> {\n  value: string;\n  disabled?: boolean;\n  id?: string;\n}\n\ninterface RadioGroupLabelProps\n  extends React.ComponentPropsWithoutRef<typeof Text> {\n  disabled?: boolean;\n  htmlFor?: string;\n}\n\nconst RadioGroupContext = React.createContext<{\n  value?: string;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n}>({});\n\nfunction RadioGroup({\n  value,\n  defaultValue,\n  onValueChange,\n  disabled = false,\n  className,\n  children,\n  ...props\n}: RadioGroupRootProps) {\n  const [innerValue, setInnerValue] = React.useState<string | undefined>(\n    value ?? defaultValue\n  );\n  const currentValue = value !== undefined ? value : innerValue;\n\n  const handleValueChange = React.useCallback(\n    (newValue: string) => {\n      if (disabled) return;\n\n      if (value === undefined) {\n        setInnerValue(newValue);\n      }\n\n      onValueChange?.(newValue);\n    },\n    [value, onValueChange, disabled]\n  );\n\n  return (\n    <RadioGroupContext.Provider\n      value={{\n        value: currentValue,\n        onValueChange: handleValueChange,\n        disabled,\n      }}\n    >\n      <View\n        className={cn(\"space-y-4\", className)}\n        accessibilityRole=\"radiogroup\"\n        {...props}\n      >\n        {children}\n      </View>\n    </RadioGroupContext.Provider>\n  );\n}\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof Pressable>,\n  RadioGroupItemProps\n>(({ className, value, disabled, id, ...props }, ref) => {\n  const {\n    value: groupValue,\n    onValueChange,\n    disabled: groupDisabled,\n  } = React.useContext(RadioGroupContext);\n  const isDisabled = disabled || groupDisabled;\n  const isChecked = value === groupValue;\n\n  const handlePress = () => {\n    if (!isDisabled) {\n      onValueChange?.(value);\n    }\n  };\n\n  return (\n    <Pressable\n      ref={ref}\n      accessibilityRole=\"radio\"\n      accessibilityState={{ checked: isChecked, disabled: isDisabled }}\n      onPress={handlePress}\n      disabled={isDisabled}\n      className={cn(\n        \"h-6 w-6 rounded-full border-2 justify-center items-center\",\n        isChecked\n          ? \"border-primary bg-primary/10\"\n          : \"border-border bg-transparent\",\n        isDisabled && \"opacity-50\",\n        className\n      )}\n      accessibilityLabel={id}\n      {...props}\n    >\n      {isChecked && <View className=\"h-3 w-3 rounded-full bg-primary\" />}\n    </Pressable>\n  );\n});\n\nconst RadioGroupLabel = React.forwardRef<\n  React.ElementRef<typeof Text>,\n  RadioGroupLabelProps\n>(({ className, disabled, htmlFor, ...props }, ref) => {\n  return (\n    <Text\n      ref={ref}\n      className={cn(\n        \"text-base text-foreground ml-3\",\n        disabled && \"text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  );\n});\n\nRadioGroupItem.displayName = \"RadioGroupItem\";\nRadioGroupLabel.displayName = \"RadioGroupLabel\";\n\nexport { RadioGroup, RadioGroupItem, RadioGroupLabel };\n",
      "type": "registry:ui"
    }
  ]
}