{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "A tabs component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/tabs/tabs.tsx",
      "content": "import * as React from \"react\";\nimport { View, Text, Pressable, Platform } from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TabsProps {\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsTriggerProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsContentProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContext = React.createContext<{\n  value: string;\n  onValueChange: (value: string) => void;\n}>({\n  value: \"\",\n  onValueChange: () => { },\n});\n\nconst Tabs = React.forwardRef<View, TabsProps>(\n  ({ defaultValue, value, onValueChange, children, className }, ref) => {\n    const [selectedValue, setSelectedValue] = React.useState(\n      value || defaultValue || \"\"\n    );\n\n    const handleValueChange = React.useCallback(\n      (newValue: string) => {\n        setSelectedValue(newValue);\n        onValueChange?.(newValue);\n      },\n      [onValueChange]\n    );\n\n    return (\n      <TabsContext.Provider\n        value={{\n          value: selectedValue,\n          onValueChange: handleValueChange,\n        }}\n      >\n        <View ref={ref} className={cn(\"w-full\", className)}>\n          {children}\n        </View>\n      </TabsContext.Provider>\n    );\n  }\n);\n\nconst TabsList = React.forwardRef<View, TabsListProps>(\n  ({ children, className }, ref) => {\n    return (\n      <View\n        ref={ref}\n        className={cn(\n          \"flex-row items-center justify-center rounded-xl bg-muted p-1\",\n          Platform.OS === \"ios\" ? \"h-12\" : \"h-14\",\n          className\n        )}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nconst TabsTrigger = React.forwardRef<View, TabsTriggerProps>(\n  ({ value, children, className }, ref) => {\n    const { value: selectedValue, onValueChange } =\n      React.useContext(TabsContext);\n    const isSelected = selectedValue === value;\n\n    return (\n      <Pressable\n        ref={ref}\n        onPress={() => onValueChange(value)}\n        className={cn(\n          \"flex-1 items-center justify-center rounded-lg px-4 py-2\",\n          Platform.OS === \"ios\" ? \"h-10\" : \"h-12\",\n          isSelected ? \"bg-background\" : \"bg-transparent\",\n          className\n        )}\n      >\n        <Text\n          className={cn(\n            \"text-base font-medium\",\n            isSelected ? \"text-foreground\" : \"text-muted-foreground\"\n          )}\n        >\n          {children}\n        </Text>\n      </Pressable>\n    );\n  }\n);\n\nconst TabsContent = React.forwardRef<View, TabsContentProps>(\n  ({ value, children, className }, ref) => {\n    const { value: selectedValue } = React.useContext(TabsContext);\n    const isSelected = selectedValue === value;\n\n    if (!isSelected) return null;\n\n    return (\n      <View ref={ref} className={cn(\"mt-4\", className)}>\n        {children}\n      </View>\n    );\n  }\n);\n\nTabs.displayName = \"Tabs\";\nTabsList.displayName = \"TabsList\";\nTabsTrigger.displayName = \"TabsTrigger\";\nTabsContent.displayName = \"TabsContent\";\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "type": "registry:component"
    }
  ],
  "changelog": [],
  "customUsage": "",
  "customPreview": ""
}