{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "type": "registry:component",
  "title": "Dropdown",
  "description": "A dropdown component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/dropdown/dropdown.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  Modal,\n  TouchableWithoutFeedback,\n  Platform,\n  Animated,\n  ScrollView,\n  Dimensions,\n  LayoutChangeEvent,\n  LayoutRectangle,\n} from \"react-native\";\nimport { cn } from \"@/lib/utils\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\ninterface DropdownProps {\n  children: React.ReactNode;\n  className?: string;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface DropdownTriggerProps {\n  children: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  asChild?: boolean;\n}\n\ninterface DropdownContentProps {\n  children: React.ReactNode;\n  className?: string;\n  align?: \"start\" | \"center\" | \"end\";\n  sideOffset?: number;\n}\n\ninterface DropdownItemProps {\n  children: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  destructive?: boolean;\n  onSelect?: () => void;\n  icon?: React.ComponentProps<typeof Ionicons>[\"name\"];\n  shortcut?: string;\n}\n\ninterface DropdownLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface DropdownSeparatorProps {\n  className?: string;\n}\n\ninterface DropdownGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst DropdownContext = React.createContext<{\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  triggerRect: LayoutRectangle | null;\n  setTriggerRect: (rect: LayoutRectangle) => void;\n}>({\n  open: false,\n  setOpen: () => { },\n  triggerRect: null,\n  setTriggerRect: () => { },\n});\n\nconst Dropdown = React.forwardRef<View, DropdownProps>(\n  ({ children, className, open = false, onOpenChange, ...props }, ref) => {\n    const [internalOpen, setInternalOpen] = React.useState(false);\n    const [triggerRect, setTriggerRect] =\n      React.useState<LayoutRectangle | null>(null);\n\n    const isControlled = open !== undefined;\n    const isOpen = isControlled ? open : internalOpen;\n\n    const setOpen = React.useCallback(\n      (value: boolean) => {\n        if (!isControlled) {\n          setInternalOpen(value);\n        }\n        onOpenChange?.(value);\n      },\n      [isControlled, onOpenChange]\n    );\n\n    return (\n      <DropdownContext.Provider\n        value={{ open: isOpen, setOpen, triggerRect, setTriggerRect }}\n      >\n        <View ref={ref} className={cn(\"\", className)} {...props}>\n          {children}\n        </View>\n      </DropdownContext.Provider>\n    );\n  }\n);\n\nDropdown.displayName = \"Dropdown\";\n\nconst DropdownTrigger = React.forwardRef<View, DropdownTriggerProps>(\n  (\n    { children, className, disabled = false, asChild = false, ...props },\n    ref\n  ) => {\n    const { setOpen, setTriggerRect } = React.useContext(DropdownContext);\n    const triggerRef = React.useRef<View>(null);\n\n    const measureTrigger = () => {\n      triggerRef.current?.measure((x, y, width, height, pageX, pageY) => {\n        setTriggerRect({\n          x: pageX,\n          y: pageY,\n          width,\n          height,\n        });\n      });\n    };\n\n    const handlePress = (e: any) => {\n      measureTrigger();\n      setOpen(true);\n    };\n\n    if (asChild) {\n      const child = React.Children.only(children) as React.ReactElement<{\n        onPress?: (e: any) => void;\n        ref?: React.Ref<any>;\n        disabled?: boolean;\n      }>;\n      return React.cloneElement(child, {\n        ...props,\n        ref: triggerRef,\n        onPress: (e: any) => {\n          child.props?.onPress?.(e);\n          handlePress(e);\n        },\n        disabled,\n      });\n    }\n\n    return (\n      <Pressable\n        ref={triggerRef}\n        className={cn(\"\", className)}\n        disabled={disabled}\n        onPress={handlePress}\n        {...props}\n      >\n        {children}\n      </Pressable>\n    );\n  }\n);\n\nDropdownTrigger.displayName = \"DropdownTrigger\";\n\nconst DropdownContent = React.forwardRef<View, DropdownContentProps>(\n  ({ children, className, align = \"start\", sideOffset = 4, ...props }, ref) => {\n    const { open, setOpen, triggerRect } = React.useContext(DropdownContext);\n    const fadeAnim = React.useRef(new Animated.Value(0)).current;\n    const scaleAnim = React.useRef(new Animated.Value(0.95)).current;\n    const [isVisible, setIsVisible] = React.useState(open);\n    const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } =\n      Dimensions.get(\"window\");\n    const [contentSize, setContentSize] = React.useState({\n      width: 0,\n      height: 0,\n    });\n\n    React.useEffect(() => {\n      if (open && !isVisible) {\n        setIsVisible(true);\n      }\n    }, [open, isVisible]);\n\n    React.useEffect(() => {\n      if (isVisible) {\n        Animated.parallel([\n          Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: 200,\n            useNativeDriver: true,\n          }),\n          Animated.spring(scaleAnim, {\n            toValue: 1,\n            damping: 20,\n            stiffness: 300,\n            useNativeDriver: true,\n          }),\n        ]).start();\n      }\n    }, [isVisible, fadeAnim, scaleAnim]);\n\n    const handleClose = React.useCallback(() => {\n      Animated.parallel([\n        Animated.timing(fadeAnim, {\n          toValue: 0,\n          duration: 150,\n          useNativeDriver: true,\n        }),\n        Animated.timing(scaleAnim, {\n          toValue: 0.95,\n          duration: 150,\n          useNativeDriver: true,\n        }),\n      ]).start(() => {\n        setIsVisible(false);\n        setOpen(false);\n      });\n    }, [fadeAnim, scaleAnim, setOpen]);\n\n    const handleLayout = (event: LayoutChangeEvent) => {\n      const { width, height } = event.nativeEvent.layout;\n      setContentSize({ width, height });\n    };\n\n    if (!isVisible || !triggerRect) return null;\n\n    // Calculate position\n    let left = triggerRect.x;\n    if (align === \"end\") {\n      left = triggerRect.x + triggerRect.width - contentSize.width;\n    } else if (align === \"center\") {\n      left = triggerRect.x + (triggerRect.width - contentSize.width) / 2;\n    }\n\n    // Ensure the dropdown stays within screen bounds\n    left = Math.max(16, Math.min(left, SCREEN_WIDTH - contentSize.width - 16));\n\n    // Position below the trigger by default\n    let top = triggerRect.y + triggerRect.height + sideOffset;\n\n    // If there's not enough space below, position above the trigger\n    if (top + contentSize.height > SCREEN_HEIGHT - 32) {\n      top = triggerRect.y - contentSize.height - sideOffset;\n    }\n\n    return (\n      <Modal\n        visible={isVisible}\n        transparent\n        statusBarTranslucent\n        animationType=\"none\"\n      >\n        <TouchableWithoutFeedback onPress={handleClose}>\n          <Animated.View\n            className=\"flex-1 bg-black/25\"\n            style={{ opacity: fadeAnim }}\n          >\n            <TouchableWithoutFeedback>\n              <Animated.View\n                ref={ref}\n                onLayout={handleLayout}\n                className={cn(\n                  \"absolute bg-background rounded-xl overflow-hidden\",\n                  Platform.OS === \"ios\"\n                    ? \"ios:shadow-xl\"\n                    : \"android:elevation-8\",\n                  className\n                )}\n                style={{\n                  transform: [{ scale: scaleAnim }],\n                  top,\n                  left,\n                  minWidth: Math.max(triggerRect.width, 180),\n                  maxWidth: SCREEN_WIDTH - 32,\n                  maxHeight: SCREEN_HEIGHT * 0.7,\n                }}\n                {...props}\n              >\n                <ScrollView bounces={false} className=\"py-2\">\n                  {children}\n                </ScrollView>\n              </Animated.View>\n            </TouchableWithoutFeedback>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n      </Modal>\n    );\n  }\n);\n\nDropdownContent.displayName = \"DropdownContent\";\n\nconst DropdownItem = React.forwardRef<View, DropdownItemProps>(\n  (\n    {\n      children,\n      className,\n      disabled = false,\n      destructive = false,\n      onSelect,\n      icon,\n      shortcut,\n      ...props\n    },\n    ref\n  ) => {\n    const { setOpen } = React.useContext(DropdownContext);\n\n    const handlePress = () => {\n      onSelect?.();\n      setOpen(false);\n    };\n\n    return (\n      <Pressable\n        ref={ref}\n        className={cn(\n          \"flex-row items-center px-4 py-3 active:bg-muted/50\",\n          disabled && \"opacity-50\",\n          destructive && \"text-destructive\",\n          className\n        )}\n        disabled={disabled}\n        onPress={handlePress}\n        {...props}\n      >\n        {icon && (\n          <Ionicons\n            name={icon}\n            size={22}\n            className={cn(\n              \"text-foreground mr-3\",\n              destructive && \"text-destructive\"\n            )}\n          />\n        )}\n        <Text\n          className={cn(\n            \"flex-1 text-base text-foreground\",\n            destructive && \"text-destructive\"\n          )}\n        >\n          {children}\n        </Text>\n        {shortcut && (\n          <Text className=\"text-muted-foreground text-sm ml-3\">{shortcut}</Text>\n        )}\n      </Pressable>\n    );\n  }\n);\n\nDropdownItem.displayName = \"DropdownItem\";\n\nconst DropdownLabel = React.forwardRef<View, DropdownLabelProps>(\n  ({ children, className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"px-4 py-2\", className)} {...props}>\n      <Text className=\"text-sm font-medium text-muted-foreground\">\n        {children}\n      </Text>\n    </View>\n  )\n);\n\nDropdownLabel.displayName = \"DropdownLabel\";\n\nconst DropdownSeparator = React.forwardRef<View, DropdownSeparatorProps>(\n  ({ className, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"h-[1px] bg-border my-2\", className)}\n      {...props}\n    />\n  )\n);\n\nDropdownSeparator.displayName = \"DropdownSeparator\";\n\nconst DropdownGroup = React.forwardRef<View, DropdownGroupProps>(\n  ({ children, className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"\", className)} {...props}>\n      {children}\n    </View>\n  )\n);\n\nDropdownGroup.displayName = \"DropdownGroup\";\n\nexport {\n  Dropdown,\n  DropdownTrigger,\n  DropdownContent,\n  DropdownItem,\n  DropdownLabel,\n  DropdownSeparator,\n  DropdownGroup,\n};\n",
      "type": "registry:component"
    }
  ],
  "changelog": [],
  "customUsage": "import { Button } from \"@/components/ui/button\";\nimport {\n    Dropdown,\n    DropdownContent,\n    DropdownGroup,\n    DropdownItem,\n    DropdownLabel,\n    DropdownSeparator,\n    DropdownTrigger,\n} from \"@/components/ui/dropdown\";\nimport * as React from \"react\";\nimport { Text } from \"react-native\";\nexport default function DropdownExample() {\n    const [basicOpen, setBasicOpen] = React.useState(false);\n\n    return (\n        <Dropdown open={basicOpen} onOpenChange={setBasicOpen}>\n            <DropdownTrigger asChild>\n                <Button variant=\"outline\">\n                    <Text className=\"text-foreground\">Open Menu</Text>\n                </Button>\n            </DropdownTrigger>\n            <DropdownContent>\n                <DropdownItem icon=\"person-outline\" onSelect={() => console.log(\"Profile\")}>\n                    Profile\n                </DropdownItem>\n                <DropdownItem icon=\"settings-outline\" onSelect={() => console.log(\"Settings\")}>\n                    Settings\n                </DropdownItem>\n                <DropdownItem icon=\"help-circle-outline\" onSelect={() => console.log(\"Help\")}>\n                    Help Center\n                </DropdownItem>\n            </DropdownContent>\n        </Dropdown>\n    );\n}\n",
  "customPreview": "import { Button } from \"@/components/ui/button\";\nimport {\n    Dropdown,\n    DropdownContent,\n    DropdownGroup,\n    DropdownItem,\n    DropdownLabel,\n    DropdownSeparator,\n    DropdownTrigger,\n} from \"@/components/ui/dropdown\";\nimport * as React from \"react\";\nimport { ScrollView, Text, View } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\nexport default function DropdownExample() {\n    const [basicOpen, setBasicOpen] = React.useState(false);\n    const [profileOpen, setProfileOpen] = React.useState(false);\n    const [settingsOpen, setSettingsOpen] = React.useState(false);\n    const [moreOpen, setMoreOpen] = React.useState(false);\n\n    return (\n        <>\n            <SafeAreaView className=\"flex-1 bg-background\" edges={[\"bottom\"]}>\n                <ScrollView className=\"flex-1 p-4\">\n                    <View className=\"mb-6\">\n                        <Text className=\"text-2xl font-bold mb-2 text-foreground\">\n                            Dropdown\n                        </Text>\n                        <Text className=\"text-base text-muted-foreground mb-6\">\n                            Displays a menu to the user — triggered by a button.\n                        </Text>\n                    </View>\n\n                    {/* Basic Dropdown */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-xl font-semibold mb-4 text-foreground\">\n                            Basic Dropdown\n                        </Text>\n                        <Dropdown open={basicOpen} onOpenChange={setBasicOpen}>\n                            <DropdownTrigger asChild>\n                                <Button variant=\"outline\">\n                                    <Text className=\"text-foreground\">Open Menu</Text>\n                                </Button>\n                            </DropdownTrigger>\n                            <DropdownContent>\n                                <DropdownItem icon=\"person-outline\" onSelect={() => console.log(\"Profile\")}>\n                                    Profile\n                                </DropdownItem>\n                                <DropdownItem icon=\"settings-outline\" onSelect={() => console.log(\"Settings\")}>\n                                    Settings\n                                </DropdownItem>\n                                <DropdownItem icon=\"help-circle-outline\" onSelect={() => console.log(\"Help\")}>\n                                    Help Center\n                                </DropdownItem>\n                            </DropdownContent>\n                        </Dropdown>\n                    </View>\n\n                    {/* Profile Dropdown */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-xl font-semibold mb-4 text-foreground\">\n                            Profile Dropdown\n                        </Text>\n                        <Dropdown open={profileOpen} onOpenChange={setProfileOpen}>\n                            <DropdownTrigger asChild>\n                                <Button>\n                                    <Text className=\"text-primary-foreground\">Account</Text>\n                                </Button>\n                            </DropdownTrigger>\n                            <DropdownContent>\n                                <DropdownLabel>My Account</DropdownLabel>\n                                <DropdownGroup>\n                                    <DropdownItem\n                                        icon=\"person-outline\"\n                                        onSelect={() => console.log(\"Profile\")}\n                                        shortcut=\"⌘P\"\n                                    >\n                                        Profile\n                                    </DropdownItem>\n                                    <DropdownItem\n                                        icon=\"card-outline\"\n                                        onSelect={() => console.log(\"Billing\")}\n                                        shortcut=\"⌘B\"\n                                    >\n                                        Billing\n                                    </DropdownItem>\n                                    <DropdownItem\n                                        icon=\"settings-outline\"\n                                        onSelect={() => console.log(\"Settings\")}\n                                        shortcut=\"⌘S\"\n                                    >\n                                        Settings\n                                    </DropdownItem>\n                                </DropdownGroup>\n                                <DropdownSeparator />\n                                <DropdownGroup>\n                                    <DropdownItem\n                                        icon=\"notifications-outline\"\n                                        onSelect={() => console.log(\"Notifications\")}\n                                    >\n                                        Notifications\n                                    </DropdownItem>\n                                    <DropdownItem\n                                        icon=\"lock-closed-outline\"\n                                        onSelect={() => console.log(\"Privacy\")}\n                                    >\n                                        Privacy\n                                    </DropdownItem>\n                                </DropdownGroup>\n                            </DropdownContent>\n                        </Dropdown>\n                    </View>\n\n                    {/* Settings Dropdown */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-xl font-semibold mb-4 text-foreground\">\n                            Settings Dropdown\n                        </Text>\n                        <Dropdown open={settingsOpen} onOpenChange={setSettingsOpen}>\n                            <DropdownTrigger asChild>\n                                <Button variant=\"outline\">\n                                    <Text className=\"text-foreground\">Settings</Text>\n                                </Button>\n                            </DropdownTrigger>\n                            <DropdownContent>\n                                <DropdownLabel>Appearance</DropdownLabel>\n                                <DropdownItem\n                                    icon=\"color-palette-outline\"\n                                    onSelect={() => console.log(\"Theme\")}\n                                >\n                                    Theme\n                                </DropdownItem>\n                                <DropdownItem\n                                    icon=\"text-outline\"\n                                    onSelect={() => console.log(\"Font Size\")}\n                                >\n                                    Font Size\n                                </DropdownItem>\n                                <DropdownSeparator />\n                                <DropdownLabel>Privacy</DropdownLabel>\n                                <DropdownItem\n                                    icon=\"eye-outline\"\n                                    onSelect={() => console.log(\"Visibility\")}\n                                >\n                                    Visibility\n                                </DropdownItem>\n                                <DropdownItem\n                                    icon=\"notifications-outline\"\n                                    onSelect={() => console.log(\"Notifications\")}\n                                >\n                                    Notifications\n                                </DropdownItem>\n                            </DropdownContent>\n                        </Dropdown>\n                    </View>\n\n                    {/* More Actions Dropdown */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-xl font-semibold mb-4 text-foreground\">\n                            More Actions\n                        </Text>\n                        <Dropdown open={moreOpen} onOpenChange={setMoreOpen}>\n                            <DropdownTrigger asChild>\n                                <Button variant=\"outline\">\n                                    <Text className=\"text-foreground\">More</Text>\n                                </Button>\n                            </DropdownTrigger>\n                            <DropdownContent>\n                                <DropdownItem\n                                    icon=\"share-outline\"\n                                    onSelect={() => console.log(\"Share\")}\n                                >\n                                    Share\n                                </DropdownItem>\n                                <DropdownItem\n                                    icon=\"duplicate-outline\"\n                                    onSelect={() => console.log(\"Duplicate\")}\n                                >\n                                    Duplicate\n                                </DropdownItem>\n                                <DropdownSeparator />\n                                <DropdownItem\n                                    icon=\"archive-outline\"\n                                    onSelect={() => console.log(\"Archive\")}\n                                >\n                                    Archive\n                                </DropdownItem>\n                                <DropdownItem\n                                    icon=\"trash-outline\"\n                                    destructive\n                                    onSelect={() => console.log(\"Delete\")}\n                                >\n                                    Delete\n                                </DropdownItem>\n                            </DropdownContent>\n                        </Dropdown>\n                    </View>\n\n                    <View className=\"h-20\" />\n                </ScrollView>\n            </SafeAreaView>\n        </>\n    );\n}\n"
}