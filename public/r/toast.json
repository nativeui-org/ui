{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:ui",
  "title": "Toast",
  "description": "A toast component for React Native applications.",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/toast/toast.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { Animated, StyleSheet, Text, View } from \"react-native\";\n\ntype ToastType = \"default\" | \"success\" | \"error\" | \"warning\" | \"info\";\n\ninterface ToastContextValue {\n\tshow: (message: string, type?: ToastType) => void;\n}\n\nconst ToastContext = React.createContext<ToastContextValue | undefined>(\n\tundefined,\n);\n\nexport const useToast = () => {\n\tconst context = React.useContext(ToastContext);\n\tif (!context) {\n\t\tthrow new Error(\"useToast must be used within a ToastProvider\");\n\t}\n\treturn context;\n};\n\nconst toastVariants = cva(\"px-4 py-3 rounded-lg shadow-lg border\", {\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault: \"bg-background border-border\",\n\t\t\tsuccess:\n\t\t\t\t\"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\",\n\t\t\terror:\n\t\t\t\t\"bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800\",\n\t\t\twarning:\n\t\t\t\t\"bg-yellow-50 border-yellow-200 dark:bg-yellow-950 dark:border-yellow-800\",\n\t\t\tinfo: \"bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: \"default\",\n\t},\n});\n\nconst toastTextVariants = cva(\"text-sm font-medium\", {\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault: \"text-foreground\",\n\t\t\tsuccess: \"text-green-900 dark:text-green-100\",\n\t\t\terror: \"text-red-900 dark:text-red-100\",\n\t\t\twarning: \"text-yellow-900 dark:text-yellow-100\",\n\t\t\tinfo: \"text-blue-900 dark:text-blue-100\",\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tvariant: \"default\",\n\t},\n});\n\ninterface ToastProviderProps {\n\tchildren: React.ReactNode;\n\tduration?: number;\n\tposition?: \"top\" | \"bottom\";\n}\n\nexport function ToastProvider({\n\tchildren,\n\tduration = 3000,\n\tposition = \"bottom\",\n}: ToastProviderProps) {\n\tconst [toast, setToast] = React.useState<{\n\t\tmessage: string;\n\t\ttype: ToastType;\n\t} | null>(null);\n\tconst fadeAnim = React.useRef(new Animated.Value(0)).current;\n\tconst timeoutRef = React.useRef<ReturnType<typeof setTimeout> | undefined>(\n\t\tundefined,\n\t);\n\n\tconst show = React.useCallback(\n\t\t(message: string, type: ToastType = \"default\") => {\n\t\t\tif (timeoutRef.current) {\n\t\t\t\tclearTimeout(timeoutRef.current);\n\t\t\t}\n\n\t\t\tsetToast({ message, type });\n\n\t\t\tAnimated.timing(fadeAnim, {\n\t\t\t\ttoValue: 1,\n\t\t\t\tduration: 200,\n\t\t\t\tuseNativeDriver: true,\n\t\t\t}).start(() => {\n\t\t\t\ttimeoutRef.current = setTimeout(() => {\n\t\t\t\t\tAnimated.timing(fadeAnim, {\n\t\t\t\t\t\ttoValue: 0,\n\t\t\t\t\t\tduration: 200,\n\t\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t\t}).start(() => setToast(null));\n\t\t\t\t}, duration);\n\t\t\t});\n\t\t},\n\t\t[fadeAnim, duration],\n\t);\n\n\tReact.useEffect(() => {\n\t\treturn () => {\n\t\t\tif (timeoutRef.current) {\n\t\t\t\tclearTimeout(timeoutRef.current);\n\t\t\t}\n\t\t};\n\t}, []);\n\n\tconst positionStyle = position === \"top\" ? { top: 50 } : { bottom: 50 };\n\n\treturn (\n\t\t<ToastContext.Provider value={{ show }}>\n\t\t\t{children}\n\t\t\t{toast && (\n\t\t\t\t<Animated.View\n\t\t\t\t\tstyle={[\n\t\t\t\t\t\tstyles.container,\n\t\t\t\t\t\tpositionStyle,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\topacity: fadeAnim,\n\t\t\t\t\t\t\ttransform: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttranslateY: fadeAnim.interpolate({\n\t\t\t\t\t\t\t\t\t\tinputRange: [0, 1],\n\t\t\t\t\t\t\t\t\t\toutputRange: position === \"top\" ? [-40, 0] : [40, 0],\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<View className={cn(toastVariants({ variant: toast.type }))}>\n\t\t\t\t\t\t<Text className={cn(toastTextVariants({ variant: toast.type }))}>\n\t\t\t\t\t\t\t{toast.message}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</Animated.View>\n\t\t\t)}\n\t\t</ToastContext.Provider>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: \"absolute\",\n\t\talignSelf: \"center\",\n\t\tleft: 0,\n\t\tright: 0,\n\t\talignItems: \"center\",\n\t\tpaddingHorizontal: 16,\n\t\tzIndex: 9999,\n\t},\n});\n\nexport { toastVariants, toastTextVariants };\nexport type { ToastType, ToastProviderProps };",
      "type": "registry:ui"
    }
  ],
  "changelog": [],
  "customUsage": "import { Button } from \"@/components/ui/button\";\nimport { ToastProvider, useToast } from \"@/components/ui/toast\";\nimport { Text, View } from \"react-native\";\n\nexport default function ToastUsageExample() {\n\treturn (\n\t\t<ToastProvider duration={3000} position=\"bottom\">\n\t\t\t<View>\n\t\t\t\t<BasicToast />\n\t\t\t</View>\n\t\t</ToastProvider>\n\t);\n}\n\nfunction BasicToast() {\n\tconst { show } = useToast();\n\n\treturn (\n\t\t<View>\n\t\t\t<Button onPress={() => show(\"Your changes have been saved\")}>\n\t\t\t\t<Text className=\"text-primary-foreground dark:text-primary-foreground\">\n\t\t\t\t\tShow Toast\n\t\t\t\t</Text>\n\t\t\t</Button>\n\t\t</View>\n\t);\n}",
  "customPreview": "import { Button } from \"@/components/ui/button\";\nimport { ToastProvider, useToast } from \"@/components/ui/toast\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { useColorScheme } from \"nativewind\";\nimport React from \"react\";\nimport { ScrollView, Text, View } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\nfunction ToastScreen() {\n\tconst { show } = useToast();\n\tconst { colorScheme } = useColorScheme();\n\tconst isDark = colorScheme === \"dark\";\n\n\tReact.useEffect(() => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tshow(\"Toast component loaded successfully!\", \"success\");\n\t\t}, 500);\n\t\treturn () => clearTimeout(timer);\n\t}, [show]);\n\n\treturn (\n\t\t<>\n\t\t\t<SafeAreaView className=\"flex-1 bg-background\" edges={[\"bottom\"]}>\n\t\t\t\t<ScrollView className=\"px-5 py-5\">\n\t\t\t\t\t<View className=\"mb-6\">\n\t\t\t\t\t\t<Text className=\"text-2xl font-bold mb-2 text-foreground\">\n\t\t\t\t\t\t\tToast\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text className=\"text-base mb-4 text-muted-foreground\">\n\t\t\t\t\t\t\tDisplay temporary notification messages\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text className=\"text-base mb-4 text-foreground\">\n\t\t\t\t\t\t\tCurrent mode: {isDark ? \"dark\" : \"light\"}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\n\t\t\t\t\t<View className=\"mb-6\">\n\t\t\t\t\t\t<Text className=\"text-xl font-semibold mb-4 text-foreground\">\n\t\t\t\t\t\t\tToast Variants\n\t\t\t\t\t\t</Text>\n\n\t\t\t\t\t\t<View className=\"gap-4\">\n\t\t\t\t\t\t\t<View className=\"flex-row gap-3 flex-wrap\">\n\t\t\t\t\t\t\t\t<Button onPress={() => show(\"This is a default toast\")}>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-primary-foreground dark:text-primary-foreground\">\n\t\t\t\t\t\t\t\t\t\tDefault\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\tonPress={() => show(\"Operation successful!\", \"success\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"check-circle\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"white\" : \"#111827\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-foreground dark:text-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tSuccess\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"destructive\"\n\t\t\t\t\t\t\t\t\tonPress={() => show(\"Something went wrong\", \"error\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"alert-circle\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"#111827\" : \"white\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-destructive-foreground dark:text-destructive-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tError\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t<View className=\"flex-row gap-3 flex-wrap\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tonPress={() => show(\"Please review your changes\", \"warning\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"alert-triangle\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"white\" : \"#111827\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-secondary-foreground dark:text-secondary-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tWarning\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\tonPress={() => show(\"Here's some information\", \"info\")}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"info\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"white\" : \"#111827\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-foreground dark:text-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tInfo\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\n\t\t\t\t\t<View className=\"mb-6\">\n\t\t\t\t\t\t<Text className=\"text-xl font-semibold mb-4 text-foreground\">\n\t\t\t\t\t\t\tToast with Actions\n\t\t\t\t\t\t</Text>\n\n\t\t\t\t\t\t<View className=\"gap-4\">\n\t\t\t\t\t\t\t<View className=\"flex-row gap-3 flex-wrap\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonPress={async () => {\n\t\t\t\t\t\t\t\t\t\tshow(\"Processing...\", \"info\");\n\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\t\t\t\t\t\t\tshow(\"Changes saved successfully!\", \"success\");\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"save\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"#111827\" : \"white\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-primary-foreground dark:text-primary-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tSave Changes\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\tonPress={async () => {\n\t\t\t\t\t\t\t\t\t\tshow(\"Uploading file...\", \"info\");\n\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 2000));\n\t\t\t\t\t\t\t\t\t\tshow(\"File uploaded!\", \"success\");\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Feather\n\t\t\t\t\t\t\t\t\t\tname=\"upload\"\n\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\tcolor={isDark ? \"white\" : \"#111827\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Text className=\"text-foreground dark:text-foreground ml-2\">\n\t\t\t\t\t\t\t\t\t\tUpload File\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView>\n\t\t\t</SafeAreaView>\n\t\t</>\n\t);\n}\n\nexport default function ToastPreview() {\n\treturn (\n\t\t<ToastProvider duration={3000} position=\"bottom\">\n\t\t\t<ToastScreen />\n\t\t</ToastProvider>\n\t);\n}"
}