{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:component",
  "title": "Combobox",
  "description": "A combobox component for React Native applications.",
  "dependencies": [
    "react-native",
    "@expo/vector-icons"
  ],
  "registryDependencies": [
    "https://nativeui.io/registry/drawer.json",
    "https://nativeui.io/registry/input.json"
  ],
  "files": [
    {
      "path": "registry/combobox/combobox.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  Platform,\n  FlatList,\n  TextInput,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { cn } from \"@/lib/utils\";\nimport { Drawer, useDrawer } from \"@/components/ui/drawer\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface ComboboxProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  disabled?: boolean;\n  className?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n  items: {\n    value: string;\n    label: string;\n    disabled?: boolean;\n  }[];\n  filter?: (value: string, search: string) => boolean;\n  emptyText?: string;\n}\n\ninterface ComboboxItemProps {\n  value: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n  className?: string;\n  onSelect?: (value: string, label: React.ReactNode) => void;\n  selectedValue?: string;\n}\n\ninterface ComboboxLabelProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface ComboboxGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface ComboboxSeparatorProps {\n  className?: string;\n}\n\nconst searchState = {\n  value: \"\",\n  listeners: new Set<() => void>(),\n\n  setValue(newValue: string) {\n    this.value = newValue;\n    this.notifyListeners();\n  },\n\n  addListener(listener: () => void) {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  },\n\n  notifyListeners() {\n    this.listeners.forEach((listener) => listener());\n  },\n};\n\nconst ComboboxSearchInput = () => {\n  const [localValue, setLocalValue] = React.useState(searchState.value);\n  const inputRef = React.useRef<TextInput>(null);\n\n  React.useEffect(() => {\n    const unsubscribe = searchState.addListener(() => {\n      setLocalValue(searchState.value);\n    });\n    return unsubscribe;\n  }, []);\n\n  const handleChangeText = (text: string) => {\n    setLocalValue(text);\n    searchState.setValue(text);\n  };\n\n  const handleClear = () => {\n    setLocalValue(\"\");\n    searchState.setValue(\"\");\n    inputRef.current?.clear();\n  };\n\n  return (\n    <View className=\"px-4 py-2\">\n      <View className=\"relative mb-2\">\n        <Input\n          ref={inputRef}\n          placeholder=\"Search...\"\n          placeholderTextColor=\"#9CA3AF\"\n          className=\"pl-10\"\n          value={localValue}\n          onChangeText={handleChangeText}\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          returnKeyType=\"search\"\n        />\n        <View className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n          <Ionicons name=\"search\" size={20} color=\"#9CA3AF\" a />\n        </View>\n        {localValue.length > 0 && (\n          <View className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n            <Pressable onPress={handleClear} hitSlop={8}>\n              <Ionicons name=\"close-circle\" size={18} color=\"#9CA3AF\" />\n            </Pressable>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst ComboboxItemsList = ({\n  items,\n  selectedValue,\n  onSelect,\n  filter,\n  emptyText,\n}: {\n  items: ComboboxProps[\"items\"];\n  selectedValue?: string;\n  onSelect: (value: string) => void;\n  filter: (value: string, search: string) => boolean;\n  emptyText: string;\n}) => {\n  const [filteredItems, setFilteredItems] = React.useState(items);\n\n  React.useEffect(() => {\n    const updateFilter = () => {\n      if (!searchState.value) {\n        setFilteredItems(items);\n      } else {\n        setFilteredItems(\n          items.filter((item) => filter(item.value, searchState.value))\n        );\n      }\n    };\n\n    updateFilter();\n\n    const unsubscribe = searchState.addListener(updateFilter);\n    return unsubscribe;\n  }, [items, filter]);\n\n  if (filteredItems.length === 0) {\n    return (\n      <View className=\"p-4 items-center justify-center\">\n        <Text className=\"text-muted-foreground text-base\">{emptyText}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <FlatList\n      data={filteredItems}\n      keyExtractor={(item) => item.value}\n      keyboardShouldPersistTaps=\"handled\"\n      nestedScrollEnabled={true}\n      renderItem={({ item }) => (\n        <ComboboxItem\n          value={item.value}\n          disabled={item.disabled}\n          selectedValue={selectedValue}\n          onSelect={onSelect}\n        >\n          {item.label}\n        </ComboboxItem>\n      )}\n      contentContainerStyle={{ paddingBottom: 20 }}\n    />\n  );\n};\n\nconst Combobox = React.forwardRef<View, ComboboxProps>(\n  (\n    {\n      value,\n      onValueChange,\n      placeholder = \"Select an option\",\n      searchPlaceholder = \"Search...\",\n      disabled = false,\n      className,\n      triggerClassName,\n      contentClassName,\n      items = [],\n      filter,\n      emptyText = \"No results found.\",\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [selectedValue, setSelectedValue] = React.useState(value);\n\n    React.useEffect(() => {\n      if (!isOpen) {\n        setTimeout(() => {\n          searchState.setValue(\"\");\n        }, 100);\n      }\n    }, [isOpen]);\n\n    React.useEffect(() => {\n      setSelectedValue(value);\n    }, [value]);\n\n    const defaultFilter = React.useCallback(\n      (itemValue: string, search: string) => {\n        const label =\n          items.find((item) => item.value === itemValue)?.label || \"\";\n        return label.toLowerCase().includes(search.toLowerCase());\n      },\n      [items]\n    );\n\n    const filterFn = filter || defaultFilter;\n\n    const selectedLabel = React.useMemo(() => {\n      if (!selectedValue) return \"\";\n      return items.find((item) => item.value === selectedValue)?.label || \"\";\n    }, [selectedValue, items]);\n\n    const handleSelect = React.useCallback(\n      (itemValue: string) => {\n        setSelectedValue(itemValue);\n        if (onValueChange) {\n          onValueChange(itemValue);\n        }\n      },\n      [onValueChange]\n    );\n\n    return (\n      <View ref={ref} className={cn(\"w-full\", className)}>\n        <Pressable\n          disabled={disabled}\n          onPress={() => setIsOpen(true)}\n          className={cn(\n            \"flex-row h-12 items-center justify-between rounded-md border border-input bg-transparent px-3 py-2\",\n            \"shadow-sm\",\n            \"active:opacity-70\",\n            disabled && \"opacity-50\",\n            Platform.OS === \"ios\"\n              ? \"ios:shadow-sm ios:shadow-foreground/10\"\n              : \"android:elevation-1\",\n            triggerClassName\n          )}\n        >\n          <Text\n            className={cn(\n              \"text-base flex-1\",\n              !selectedValue && \"text-muted-foreground\",\n              \"text-foreground\"\n            )}\n            numberOfLines={1}\n          >\n            {selectedValue ? selectedLabel : placeholder}\n          </Text>\n\n          <Ionicons\n            name=\"chevron-down\"\n            size={16}\n            color=\"#9CA3AF\"\n            style={{ marginLeft: 8, opacity: 0.7 }}\n          />\n        </Pressable>\n\n        <Drawer\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          title={placeholder}\n          snapPoints={[0.5, 0.8]}\n          initialSnapIndex={0}\n          contentClassName={contentClassName}\n        >\n          <ComboboxSearchInput />\n          <ComboboxItemsList\n            items={items}\n            selectedValue={selectedValue}\n            onSelect={handleSelect}\n            filter={filterFn}\n            emptyText={emptyText}\n          />\n        </Drawer>\n      </View>\n    );\n  }\n);\n\nCombobox.displayName = \"Combobox\";\n\nconst ComboboxGroup = React.forwardRef<View, ComboboxGroupProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <View ref={ref} className={cn(\"\", className)} {...props}>\n        {children}\n      </View>\n    );\n  }\n);\n\nComboboxGroup.displayName = \"ComboboxGroup\";\n\nconst ComboboxItem = React.forwardRef<typeof Pressable, ComboboxItemProps>(\n  (\n    { className, children, value, disabled, onSelect, selectedValue, ...props },\n    ref\n  ) => {\n    const isSelected = selectedValue === value;\n    const drawer = useDrawer();\n\n    return (\n      <Pressable\n        ref={ref as any}\n        disabled={disabled}\n        onPress={() => {\n          if (onSelect) {\n            onSelect(value, children);\n          }\n          drawer.animateClose();\n        }}\n        className={cn(\n          \"flex-row h-14 items-center justify-between px-4 py-2 active:bg-accent/50\",\n          isSelected ? \"bg-accent\" : \"\",\n          disabled && \"opacity-50\",\n          className\n        )}\n        {...props}\n      >\n        <Text\n          className={cn(\n            \"text-base\",\n            isSelected\n              ? \"text-accent-foreground font-medium\"\n              : \"text-foreground\"\n          )}\n        >\n          {children}\n        </Text>\n\n        {isSelected && <Ionicons name=\"checkmark\" size={20} color=\"#4F46E5\" />}\n      </Pressable>\n    );\n  }\n);\n\nComboboxItem.displayName = \"ComboboxItem\";\n\nconst ComboboxLabel = React.forwardRef<Text, ComboboxLabelProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <Text\n        ref={ref}\n        className={cn(\n          \"px-3 py-2 text-sm font-semibold text-foreground\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Text>\n    );\n  }\n);\n\nComboboxLabel.displayName = \"ComboboxLabel\";\n\nconst ComboboxSeparator = React.forwardRef<View, ComboboxSeparatorProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <View\n        ref={ref}\n        className={cn(\"h-px bg-muted mx-2 my-1\", className)}\n        {...props}\n      />\n    );\n  }\n);\n\nComboboxSeparator.displayName = \"ComboboxSeparator\";\n\nexport {\n  Combobox,\n  ComboboxGroup,\n  ComboboxItem,\n  ComboboxLabel,\n  ComboboxSeparator,\n};\n",
      "type": "registry:component"
    }
  ]
}