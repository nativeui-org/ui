{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:component",
  "title": "Slider",
  "description": "A slider component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/slider/slider.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport {\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  PanResponder,\n  PanResponderGestureState,\n  Pressable,\n  View,\n} from \"react-native\";\n\nexport interface SliderProps {\n  defaultValue?: number[];\n  value?: number[];\n  min?: number;\n  max?: number;\n  step?: number;\n  disabled?: boolean;\n  className?: string;\n  trackClassName?: string;\n  rangeClassName?: string;\n  thumbClassName?: string;\n  onValueChange?: (value: number[]) => void;\n}\n\nexport const Slider = React.forwardRef<View, SliderProps>(\n  (\n    {\n      defaultValue = [0],\n      value,\n      min = 0,\n      max = 100,\n      step = 1,\n      disabled = false,\n      className,\n      trackClassName,\n      rangeClassName,\n      thumbClassName,\n      onValueChange,\n    },\n    ref\n  ) => {\n    const trackRef = React.useRef<View>(null);\n    const [trackLayout, setTrackLayout] = React.useState({ width: 0, x: 0 });\n    const [localValues, setLocalValues] = React.useState(\n      value !== undefined ? [...value] : [...defaultValue]\n    );\n    const activeThumbIndex = React.useRef<number | null>(null);\n\n    React.useEffect(() => {\n      if (value !== undefined) {\n        setLocalValues([...value]);\n      }\n    }, [value]);\n\n    const values = value !== undefined ? value : localValues;\n\n    const handleTrackLayout = (event: LayoutChangeEvent) => {\n      const { width, x } = event.nativeEvent.layout;\n      setTrackLayout({ width, x });\n    };\n\n    const getValueFromPosition = (position: number): number => {\n      const trackWidth = trackLayout.width;\n      if (trackWidth <= 0) return min;\n\n      const relativePosition = Math.max(0, Math.min(1, position / trackWidth));\n      const exactValue = min + relativePosition * (max - min);\n\n      if (step > 0) {\n        const steppedValue = Math.round(exactValue / step) * step;\n        return Math.max(min, Math.min(max, steppedValue));\n      }\n\n      return Math.max(min, Math.min(max, exactValue));\n    };\n\n    const getPositionFromValue = (value: number): number => {\n      const trackWidth = trackLayout.width;\n      if (trackWidth <= 0) return 0;\n\n      const relativePosition = (value - min) / (max - min);\n      return relativePosition * trackWidth;\n    };\n\n    const updateValue = (newPositions: number[], activeIndex: number) => {\n      const newValue = [...values];\n      newValue[activeIndex] = getValueFromPosition(newPositions[activeIndex]);\n\n      if (value === undefined) {\n        setLocalValues(newValue);\n      }\n\n      onValueChange?.(newValue);\n    };\n\n    const panResponders = values.map((_, index) => {\n      return PanResponder.create({\n        onStartShouldSetPanResponder: () => !disabled,\n        onMoveShouldSetPanResponder: () => !disabled,\n        onPanResponderGrant: () => {\n          activeThumbIndex.current = index;\n        },\n        onPanResponderMove: (_, gestureState: PanResponderGestureState) => {\n          if (disabled) return;\n\n          const newPositions = [...values.map(v => getPositionFromValue(v))];\n          newPositions[index] = Math.max(\n            0,\n            Math.min(trackLayout.width, gestureState.dx + getPositionFromValue(values[index]))\n          );\n\n          updateValue(newPositions, index);\n        },\n        onPanResponderRelease: () => {\n          activeThumbIndex.current = null;\n        },\n      });\n    });\n\n    const handleTrackPress = (event: GestureResponderEvent) => {\n      if (disabled) return;\n\n      const trackX = trackLayout.x;\n      const pressX = event.nativeEvent.pageX - trackX;\n\n      const thumbPositions = values.map(v => getPositionFromValue(v));\n      let closestThumbIndex = 0;\n      let minDistance = Math.abs(thumbPositions[0] - pressX);\n\n      for (let i = 1; i < thumbPositions.length; i++) {\n        const distance = Math.abs(thumbPositions[i] - pressX);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestThumbIndex = i;\n        }\n      }\n\n      const newPositions = [...thumbPositions];\n      newPositions[closestThumbIndex] = pressX;\n      updateValue(newPositions, closestThumbIndex);\n    };\n\n    const isSingleValue = values.length === 1;\n\n    return (\n      <View\n        ref={ref}\n        className={cn(\n          \"relative w-full items-center justify-center my-3\",\n          className\n        )}\n      >\n        <Pressable\n          ref={trackRef}\n          onLayout={handleTrackLayout}\n          onPress={handleTrackPress}\n          className=\"w-full\"\n        >\n          <View\n            className={cn(\n              \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n              disabled && \"bg-muted\",\n              trackClassName\n            )}\n          >\n            <View\n              className={cn(\n                \"absolute h-full bg-primary\",\n                disabled && \"bg-muted-foreground\",\n                rangeClassName\n              )}\n              style={\n                isSingleValue\n                  ? {\n                    left: 0,\n                    width: getPositionFromValue(values[0]),\n                  }\n                  : {\n                    left: getPositionFromValue(Math.min(...values)),\n                    width: Math.max(\n                      getPositionFromValue(Math.max(...values)) - getPositionFromValue(Math.min(...values)),\n                      4\n                    ),\n                  }\n              }\n            />\n          </View>\n        </Pressable>\n\n        {values.map((value, index) => (\n          <View\n            key={index}\n            style={{\n              position: 'absolute',\n              transform: [{ translateX: getPositionFromValue(value) }],\n              top: -8,\n              left: 0,\n              zIndex: 10,\n            }}\n            {...panResponders[index].panHandlers}\n            className={cn(\n              \"h-6 w-6 rounded-full border-2 border-primary bg-background shadow-md\",\n              disabled && \"border-muted-foreground bg-muted\",\n              thumbClassName\n            )}\n          />\n        ))}\n      </View>\n    );\n  }\n);\n\nSlider.displayName = \"Slider\";\n",
      "type": "registry:component"
    }
  ],
  "changelog": [],
  "customUsage": "",
  "customPreview": ""
}