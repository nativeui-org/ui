{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:component",
  "title": "Table",
  "description": "A table component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/table/table.tsx",
      "content": "import * as React from \"react\";\nimport { View, Text, ScrollView, ViewStyle } from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TableProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableHeaderProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableBodyProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableFooterProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableRowProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  selected?: boolean;\n}\n\ninterface TableHeadProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n  width?: number;\n}\n\ninterface TableCellProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n  width?: number;\n}\n\ninterface TableCaptionProps\n  extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\nconst Table = React.forwardRef<View, TableProps>(\n  ({ className, ...props }, ref) => (\n    <ScrollView\n      horizontal\n      showsHorizontalScrollIndicator={false}\n      className=\"w-full\"\n    >\n      <View ref={ref} className={cn(\"min-w-full\", className)} {...props} />\n    </ScrollView>\n  )\n);\n\nconst TableHeader = React.forwardRef<View, TableHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"border-b border-border\", className)}\n      {...props}\n    />\n  )\n);\n\nconst TableBody = React.forwardRef<View, TableBodyProps>(\n  ({ className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"\", className)} {...props} />\n  )\n);\n\nconst TableFooter = React.forwardRef<View, TableFooterProps>(\n  ({ className, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"border-t border-border bg-muted/50\", className)}\n      {...props}\n    />\n  )\n);\n\nconst TableRow = React.forwardRef<View, TableRowProps>(\n  ({ className, selected, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\n        \"flex flex-row border-b border-border\",\n        selected && \"bg-muted\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nconst TableHead = React.forwardRef<View, TableHeadProps>(\n  ({ className, align = \"left\", width, children, ...props }, ref) => {\n    const style: ViewStyle | undefined = width\n      ? {\n        width,\n        minWidth: width,\n        maxWidth: width,\n      }\n      : undefined;\n\n    return (\n      <View\n        ref={ref}\n        style={style}\n        className={cn(\n          \"py-3 px-4 flex-1\",\n          align === \"center\" && \"items-center\",\n          align === \"right\" && \"items-end\",\n          className\n        )}\n        {...props}\n      >\n        <Text className=\"text-sm font-medium text-muted-foreground\">\n          {children}\n        </Text>\n      </View>\n    );\n  }\n);\n\nconst TableCell = React.forwardRef<View, TableCellProps>(\n  ({ className, align = \"left\", width, children, ...props }, ref) => {\n    const style: ViewStyle | undefined = width\n      ? {\n        width,\n        minWidth: width,\n        maxWidth: width,\n      }\n      : undefined;\n\n    return (\n      <View\n        ref={ref}\n        style={style}\n        className={cn(\n          \"py-3 px-4 flex-1\",\n          align === \"center\" && \"items-center\",\n          align === \"right\" && \"items-end\",\n          className\n        )}\n        {...props}\n      >\n        {typeof children === \"string\" ? (\n          <Text className=\"text-base text-foreground\">{children}</Text>\n        ) : (\n          children\n        )}\n      </View>\n    );\n  }\n);\n\nconst TableCaption = React.forwardRef<View, TableCaptionProps>(\n  ({ className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"mt-4\", className)} {...props}>\n      <Text className=\"text-sm text-muted-foreground text-center\">\n        {props.children}\n      </Text>\n    </View>\n  )\n);\n\nTable.displayName = \"Table\";\nTableHeader.displayName = \"TableHeader\";\nTableBody.displayName = \"TableBody\";\nTableFooter.displayName = \"TableFooter\";\nTableRow.displayName = \"TableRow\";\nTableHead.displayName = \"TableHead\";\nTableCell.displayName = \"TableCell\";\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n",
      "type": "registry:component"
    }
  ],
  "changelog": []
}