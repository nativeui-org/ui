{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:ui",
  "title": "Table",
  "description": "A table component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/table/table.tsx",
      "content": "import * as React from \"react\";\nimport { View, Text, ScrollView, ViewStyle } from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TableProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableHeaderProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableBodyProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableFooterProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\ninterface TableRowProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  selected?: boolean;\n}\n\ninterface TableHeadProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n  width?: number;\n}\n\ninterface TableCellProps extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n  align?: \"left\" | \"center\" | \"right\";\n  width?: number;\n}\n\ninterface TableCaptionProps\n  extends React.ComponentPropsWithoutRef<typeof View> {\n  children: React.ReactNode;\n}\n\nconst Table = React.forwardRef<View, TableProps>(\n  ({ className, ...props }, ref) => (\n    <ScrollView\n      horizontal\n      showsHorizontalScrollIndicator={false}\n      className=\"w-full\"\n    >\n      <View ref={ref} className={cn(\"min-w-full\", className)} {...props} />\n    </ScrollView>\n  )\n);\n\nconst TableHeader = React.forwardRef<View, TableHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"border-b border-border\", className)}\n      {...props}\n    />\n  )\n);\n\nconst TableBody = React.forwardRef<View, TableBodyProps>(\n  ({ className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"\", className)} {...props} />\n  )\n);\n\nconst TableFooter = React.forwardRef<View, TableFooterProps>(\n  ({ className, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\"border-t border-border bg-muted/50\", className)}\n      {...props}\n    />\n  )\n);\n\nconst TableRow = React.forwardRef<View, TableRowProps>(\n  ({ className, selected, ...props }, ref) => (\n    <View\n      ref={ref}\n      className={cn(\n        \"flex flex-row border-b border-border\",\n        selected && \"bg-muted\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\n\nconst TableHead = React.forwardRef<View, TableHeadProps>(\n  ({ className, align = \"left\", width, children, ...props }, ref) => {\n    const style: ViewStyle | undefined = width\n      ? {\n        width,\n        minWidth: width,\n        maxWidth: width,\n      }\n      : undefined;\n\n    return (\n      <View\n        ref={ref}\n        style={style}\n        className={cn(\n          \"py-3 px-4 flex-1\",\n          align === \"center\" && \"items-center\",\n          align === \"right\" && \"items-end\",\n          className\n        )}\n        {...props}\n      >\n        <Text className=\"text-sm font-medium text-muted-foreground\">\n          {children}\n        </Text>\n      </View>\n    );\n  }\n);\n\nconst TableCell = React.forwardRef<View, TableCellProps>(\n  ({ className, align = \"left\", width, children, ...props }, ref) => {\n    const style: ViewStyle | undefined = width\n      ? {\n        width,\n        minWidth: width,\n        maxWidth: width,\n      }\n      : undefined;\n\n    return (\n      <View\n        ref={ref}\n        style={style}\n        className={cn(\n          \"py-3 px-4 flex-1\",\n          align === \"center\" && \"items-center\",\n          align === \"right\" && \"items-end\",\n          className\n        )}\n        {...props}\n      >\n        {typeof children === \"string\" ? (\n          <Text className=\"text-base text-foreground\">{children}</Text>\n        ) : (\n          children\n        )}\n      </View>\n    );\n  }\n);\n\nconst TableCaption = React.forwardRef<View, TableCaptionProps>(\n  ({ className, ...props }, ref) => (\n    <View ref={ref} className={cn(\"mt-4\", className)} {...props}>\n      <Text className=\"text-sm text-muted-foreground text-center\">\n        {props.children}\n      </Text>\n    </View>\n  )\n);\n\nTable.displayName = \"Table\";\nTableHeader.displayName = \"TableHeader\";\nTableBody.displayName = \"TableBody\";\nTableFooter.displayName = \"TableFooter\";\nTableRow.displayName = \"TableRow\";\nTableHead.displayName = \"TableHead\";\nTableCell.displayName = \"TableCell\";\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n",
      "type": "registry:ui"
    }
  ],
  "changelog": [],
  "customUsage": "import {\n    Table,\n    TableBody,\n    TableCaption,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { cn } from \"@/lib/utils\"\nimport { Ionicons } from \"@expo/vector-icons\"\nimport * as React from \"react\"\nimport { Pressable, Text, View } from \"react-native\"\n\n// Sample data for transactions\nconst transactions = [\n    {\n        id: \"TX001\",\n        date: \"2024-03-20\",\n        description: \"Grocery Store\",\n        amount: -85.50,\n        category: \"Shopping\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX002\",\n        date: \"2024-03-19\",\n        description: \"Salary Deposit\",\n        amount: 2500.00,\n        category: \"Income\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX003\",\n        date: \"2024-03-18\",\n        description: \"Restaurant\",\n        amount: -45.75,\n        category: \"Dining\",\n        status: \"pending\",\n    },\n    {\n        id: \"TX004\",\n        date: \"2024-03-17\",\n        description: \"Uber Ride\",\n        amount: -22.50,\n        category: \"Transport\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX005\",\n        date: \"2024-03-16\",\n        description: \"Freelance Payment\",\n        amount: 750.00,\n        category: \"Income\",\n        status: \"completed\",\n    },\n]\n\n\nexport default function TableExample() {\n    const formatCurrency = (amount: number) => {\n        return amount.toLocaleString('en-US', {\n            style: 'currency',\n            currency: 'USD',\n        })\n    }\n\n    const formatDate = (dateString: string) => {\n        return new Date(dateString).toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n        })\n    }\n\n    const getAmountColor = (amount: number) => {\n        return amount >= 0 ? \"text-green-600\" : \"text-red-600\"\n    }\n\n    return (\n        <Table>\n            <TableBody>\n                {transactions.slice(0, 3).map((tx) => (\n                    <Pressable key={tx.id}>\n                        <TableRow>\n                            <TableCell width={250}>\n                                <View className=\"flex-row items-center\">\n                                    <View className={cn(\n                                        \"w-10 h-10 rounded-full mr-3 items-center justify-center\",\n                                        tx.amount >= 0 ? \"bg-green-100\" : \"bg-red-100\"\n                                    )}>\n                                        <Ionicons\n                                            name={tx.amount >= 0 ? \"arrow-down\" : \"arrow-up\"}\n                                            size={20}\n                                            color={tx.amount >= 0 ? \"#16a34a\" : \"#dc2626\"}\n                                        />\n                                    </View>\n                                    <View>\n                                        <Text className=\"text-foreground font-medium\">{tx.description}</Text>\n                                        <Text className=\"text-sm text-muted-foreground\">\n                                            {formatDate(tx.date)}\n                                        </Text>\n                                    </View>\n                                </View>\n                            </TableCell>\n                            <TableCell width={150} align=\"right\">\n                                <Text className={cn(\"font-medium\", getAmountColor(tx.amount))}>\n                                    {formatCurrency(tx.amount)}\n                                </Text>\n                                <Text className=\"text-sm text-muted-foreground\">\n                                    {tx.category}\n                                </Text>\n                            </TableCell>\n                        </TableRow>\n                    </Pressable>\n                ))}\n            </TableBody>\n        </Table>\n    )\n}\n",
  "customPreview": "import {\n    Table,\n    TableBody,\n    TableCaption,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { cn } from \"@/lib/utils\"\nimport { Ionicons } from \"@expo/vector-icons\"\nimport * as React from \"react\"\nimport { Pressable, ScrollView, Text, View } from \"react-native\"\nimport { SafeAreaView } from \"react-native-safe-area-context\"\n\n// Sample data for transactions\nconst transactions = [\n    {\n        id: \"TX001\",\n        date: \"2024-03-20\",\n        description: \"Grocery Store\",\n        amount: -85.50,\n        category: \"Shopping\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX002\",\n        date: \"2024-03-19\",\n        description: \"Salary Deposit\",\n        amount: 2500.00,\n        category: \"Income\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX003\",\n        date: \"2024-03-18\",\n        description: \"Restaurant\",\n        amount: -45.75,\n        category: \"Dining\",\n        status: \"pending\",\n    },\n    {\n        id: \"TX004\",\n        date: \"2024-03-17\",\n        description: \"Uber Ride\",\n        amount: -22.50,\n        category: \"Transport\",\n        status: \"completed\",\n    },\n    {\n        id: \"TX005\",\n        date: \"2024-03-16\",\n        description: \"Freelance Payment\",\n        amount: 750.00,\n        category: \"Income\",\n        status: \"completed\",\n    },\n]\n\n// Sample data for monthly summary\nconst monthlySummary = [\n    { category: \"Income\", amount: 3250.00 },\n    { category: \"Shopping\", amount: -425.75 },\n    { category: \"Dining\", amount: -185.50 },\n    { category: \"Transport\", amount: -95.25 },\n]\n\nexport default function TableExample() {\n    const formatCurrency = (amount: number) => {\n        return amount.toLocaleString('en-US', {\n            style: 'currency',\n            currency: 'USD',\n        })\n    }\n\n    const formatDate = (dateString: string) => {\n        return new Date(dateString).toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n        })\n    }\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case \"completed\":\n                return \"text-green-600\"\n            case \"pending\":\n                return \"text-amber-600\"\n            default:\n                return \"text-gray-600\"\n        }\n    }\n\n    const getAmountColor = (amount: number) => {\n        return amount >= 0 ? \"text-green-600\" : \"text-red-600\"\n    }\n\n    return (\n        <>\n            <SafeAreaView className=\"flex-1 bg-background\" edges={[\"bottom\"]}>\n                <ScrollView className=\"flex-1 p-4\">\n                    {/* Recent Transactions Table */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-2xl font-bold mb-2 text-foreground\">\n                            Recent Transactions\n                        </Text>\n                        <Text className=\"text-foreground mb-4 text-muted-foreground\">\n                            Your latest financial activities\n                        </Text>\n\n                        <Table>\n                            <TableCaption>Your transaction history for March 2024.</TableCaption>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead width={100}>Date</TableHead>\n                                    <TableHead width={180}>Description</TableHead>\n                                    <TableHead width={120} align=\"right\">Amount</TableHead>\n                                    <TableHead width={120}>Status</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {transactions.map((tx) => (\n                                    <TableRow key={tx.id}>\n                                        <TableCell width={100}>\n                                            <Text className=\"text-foreground text-sm\">{formatDate(tx.date)}</Text>\n                                        </TableCell>\n                                        <TableCell width={180}>\n                                            <Text className=\"text-foreground font-medium\">{tx.description}</Text>\n                                            <Text className=\"text-sm text-muted-foreground\">{tx.category}</Text>\n                                        </TableCell>\n                                        <TableCell width={120} align=\"right\">\n                                            <Text className={cn(\"font-medium\", getAmountColor(tx.amount))}>\n                                                {formatCurrency(tx.amount)}\n                                            </Text>\n                                        </TableCell>\n                                        <TableCell width={120}>\n                                            <View className=\"flex-row items-center\">\n                                                <View className={cn(\n                                                    \"w-2 h-2 rounded-full mr-2\",\n                                                    tx.status === \"completed\" ? \"bg-green-600\" : \"bg-amber-600\"\n                                                )} />\n                                                <Text className={cn(\"capitalize\", getStatusColor(tx.status))}>\n                                                    {tx.status}\n                                                </Text>\n                                            </View>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </View>\n\n                    {/* Monthly Summary Table */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-2xl font-bold mb-2 text-foreground\">\n                            Monthly Summary\n                        </Text>\n                        <Text className=\"text-foreground mb-4 text-muted-foreground\">\n                            March 2024 breakdown by category\n                        </Text>\n\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead width={200}>Category</TableHead>\n                                    <TableHead width={150} align=\"right\">Amount</TableHead>\n                                    <TableHead width={100} align=\"right\">% of Total</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {monthlySummary.map((item) => (\n                                    <TableRow key={item.category}>\n                                        <TableCell width={200}>\n                                            <View className=\"flex-row items-center\">\n                                                <View className={cn(\n                                                    \"w-8 h-8 rounded-full mr-3 items-center justify-center\",\n                                                    item.category === \"Income\" ? \"bg-green-100\" : \"bg-red-100\"\n                                                )}>\n                                                    <Ionicons\n                                                        name={item.category === \"Income\" ? \"trending-up\" : \"trending-down\"}\n                                                        size={16}\n                                                        color={item.category === \"Income\" ? \"#16a34a\" : \"#dc2626\"}\n                                                    />\n                                                </View>\n                                                <Text className=\"text-foreground font-medium\">{item.category}</Text>\n                                            </View>\n                                        </TableCell>\n                                        <TableCell width={150} align=\"right\">\n                                            <Text className={cn(\"font-medium\", getAmountColor(item.amount))}>\n                                                {formatCurrency(item.amount)}\n                                            </Text>\n                                        </TableCell>\n                                        <TableCell width={100} align=\"right\">\n                                            <Text className=\"text-muted-foreground\">\n                                                {Math.abs((item.amount / 3250.00) * 100).toFixed(1)}%\n                                            </Text>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                            <TableFooter>\n                                <TableRow>\n                                    <TableCell width={200}>Net Total</TableCell>\n                                    <TableCell width={150} align=\"right\" className=\"font-bold\">\n                                        {formatCurrency(monthlySummary.reduce((acc, curr) => acc + curr.amount, 0))}\n                                    </TableCell>\n                                    <TableCell width={100} align=\"right\">100%</TableCell>\n                                </TableRow>\n                            </TableFooter>\n                        </Table>\n                    </View>\n\n                    {/* Compact Transaction List */}\n                    <View className=\"mb-8\">\n                        <Text className=\"text-2xl font-bold mb-2 text-foreground\">\n                            Quick View\n                        </Text>\n                        <Text className=\"text-foreground mb-4 text-muted-foreground\">\n                            Simplified transaction list\n                        </Text>\n\n                        <Table>\n                            <TableBody>\n                                {transactions.slice(0, 3).map((tx) => (\n                                    <Pressable key={tx.id}>\n                                        <TableRow>\n                                            <TableCell width={250}>\n                                                <View className=\"flex-row items-center\">\n                                                    <View className={cn(\n                                                        \"w-10 h-10 rounded-full mr-3 items-center justify-center\",\n                                                        tx.amount >= 0 ? \"bg-green-100\" : \"bg-red-100\"\n                                                    )}>\n                                                        <Ionicons\n                                                            name={tx.amount >= 0 ? \"arrow-down\" : \"arrow-up\"}\n                                                            size={20}\n                                                            color={tx.amount >= 0 ? \"#16a34a\" : \"#dc2626\"}\n                                                        />\n                                                    </View>\n                                                    <View>\n                                                        <Text className=\"text-foreground font-medium\">{tx.description}</Text>\n                                                        <Text className=\"text-sm text-muted-foreground\">\n                                                            {formatDate(tx.date)}\n                                                        </Text>\n                                                    </View>\n                                                </View>\n                                            </TableCell>\n                                            <TableCell width={150} align=\"right\">\n                                                <Text className={cn(\"font-medium\", getAmountColor(tx.amount))}>\n                                                    {formatCurrency(tx.amount)}\n                                                </Text>\n                                                <Text className=\"text-sm text-muted-foreground\">\n                                                    {tx.category}\n                                                </Text>\n                                            </TableCell>\n                                        </TableRow>\n                                    </Pressable>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </View>\n\n                    {/* Extra padding for scroll */}\n                    <View className=\"h-20\" />\n                </ScrollView>\n            </SafeAreaView>\n        </>\n    )\n}\n"
}