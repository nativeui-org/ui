{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "title": "Tooltip",
  "description": "A tooltip component for React Native applications.",
  "dependencies": [
    "react-native"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/tooltip/tooltip.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Pressable,\n  Modal,\n  TouchableWithoutFeedback,\n  Platform,\n  Animated,\n  StyleSheet,\n  Dimensions,\n  LayoutChangeEvent,\n} from \"react-native\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TooltipProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TooltipTriggerProps {\n  children: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  asChild?: boolean;\n}\n\ninterface TooltipContentProps {\n  children: React.ReactNode;\n  className?: string;\n  align?: \"start\" | \"center\" | \"end\";\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  sideOffset?: number;\n}\n\ninterface TooltipProviderProps {\n  children: React.ReactNode;\n}\n\nconst TooltipContext = React.createContext<{\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  triggerRef: React.RefObject<View | null>;\n  triggerLayout: { x: number; y: number; width: number; height: number } | null;\n  setTriggerLayout: React.Dispatch<\n    React.SetStateAction<{\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    } | null>\n  >;\n}>({\n  open: false,\n  setOpen: () => { },\n  triggerRef: { current: null },\n  triggerLayout: null,\n  setTriggerLayout: () => { },\n});\n\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get(\"window\");\n\nconst TooltipProvider = React.forwardRef<View, TooltipProviderProps>(\n  ({ children }, ref) => {\n    return <View ref={ref}>{children}</View>;\n  }\n);\n\nTooltipProvider.displayName = \"TooltipProvider\";\n\nconst Tooltip = React.forwardRef<View, TooltipProps>(\n  ({ children, className, ...props }, ref) => {\n    const [open, setOpen] = React.useState(false);\n    const triggerRef = React.useRef<View | null>(null);\n    const [triggerLayout, setTriggerLayout] = React.useState<{\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    } | null>(null);\n\n    return (\n      <TooltipContext.Provider\n        value={{\n          open,\n          setOpen,\n          triggerRef,\n          triggerLayout,\n          setTriggerLayout,\n        }}\n      >\n        <View ref={ref} className={cn(\"\", className)} {...props}>\n          {children}\n        </View>\n      </TooltipContext.Provider>\n    );\n  }\n);\n\nTooltip.displayName = \"Tooltip\";\n\nconst TooltipTrigger = React.forwardRef<View, TooltipTriggerProps>(\n  ({ children, className, disabled = false, ...props }, ref) => {\n    const { setOpen, open, triggerRef, setTriggerLayout } =\n      React.useContext(TooltipContext);\n\n    const measureTrigger = () => {\n      if (triggerRef.current) {\n        triggerRef.current.measureInWindow((x, y, width, height) => {\n          setTriggerLayout({ x, y, width, height });\n        });\n      }\n    };\n\n    const handlePress = () => {\n      if (disabled) return;\n      measureTrigger();\n      setOpen(!open);\n    };\n\n    return (\n      <Pressable\n        ref={(node) => {\n          if (typeof ref === \"function\") {\n            ref(node);\n          } else if (ref) {\n            ref.current = node;\n          }\n          triggerRef.current = node;\n        }}\n        className={cn(\"\", className)}\n        disabled={disabled}\n        onPress={handlePress}\n        accessibilityRole=\"button\"\n        {...props}\n      >\n        {children}\n      </Pressable>\n    );\n  }\n);\n\nTooltipTrigger.displayName = \"TooltipTrigger\";\n\nconst TooltipContent = React.forwardRef<View, TooltipContentProps>(\n  (\n    {\n      children,\n      className,\n      align = \"center\",\n      side = \"bottom\",\n      sideOffset = 8,\n      ...props\n    },\n    ref\n  ) => {\n    const { open, setOpen, triggerLayout } = React.useContext(TooltipContext);\n    const opacityAnim = React.useRef(new Animated.Value(0)).current;\n    const offsetAnim = React.useRef(new Animated.Value(0)).current;\n    const scaleAnim = React.useRef(new Animated.Value(0.92)).current;\n    const [contentSize, setContentSize] = React.useState<{\n      width: number;\n      height: number;\n    }>({\n      width:\n        side === \"left\" || side === \"right\"\n          ? Math.min(150, WINDOW_WIDTH / 3)\n          : 200,\n      height: 60,\n    });\n\n    const handleContentLayout = (e: LayoutChangeEvent) => {\n      const { width, height } = e.nativeEvent.layout;\n      if (width > 0 && height > 0) {\n        if (side === \"left\" || side === \"right\") {\n          setContentSize({\n            width: Math.min(width, WINDOW_WIDTH / 3),\n            height,\n          });\n        } else {\n          setContentSize({ width, height });\n        }\n      }\n    };\n\n    React.useEffect(() => {\n      if (open) {\n        opacityAnim.setValue(0);\n        scaleAnim.setValue(0.92);\n\n        switch (side) {\n          case \"top\":\n            offsetAnim.setValue(8);\n            break;\n          case \"bottom\":\n            offsetAnim.setValue(-8);\n            break;\n          case \"left\":\n            offsetAnim.setValue(8);\n            break;\n          case \"right\":\n            offsetAnim.setValue(-8);\n            break;\n        }\n\n        Animated.parallel([\n          Animated.timing(opacityAnim, {\n            toValue: 1,\n            duration: 220,\n            useNativeDriver: true,\n          }),\n          Animated.timing(scaleAnim, {\n            toValue: 1,\n            duration: 220,\n            useNativeDriver: true,\n          }),\n          Animated.timing(offsetAnim, {\n            toValue: 0,\n            duration: 220,\n            useNativeDriver: true,\n          }),\n        ]).start();\n\n        const timer = setTimeout(() => handleClose(), 4000);\n        return () => clearTimeout(timer);\n      }\n    }, [open, side]);\n\n    const handleClose = () => {\n      let targetOffset = 0;\n\n      switch (side) {\n        case \"top\":\n          targetOffset = -8;\n          break;\n        case \"bottom\":\n          targetOffset = 8;\n          break;\n        case \"left\":\n          targetOffset = -8;\n          break;\n        case \"right\":\n          targetOffset = 8;\n          break;\n      }\n\n      Animated.parallel([\n        Animated.timing(opacityAnim, {\n          toValue: 0,\n          duration: 150,\n          useNativeDriver: true,\n        }),\n        Animated.timing(scaleAnim, {\n          toValue: 0.92,\n          duration: 150,\n          useNativeDriver: true,\n        }),\n        Animated.timing(offsetAnim, {\n          toValue: targetOffset,\n          duration: 150,\n          useNativeDriver: true,\n        }),\n      ]).start(() => {\n        setOpen(false);\n      });\n    };\n\n    if (!open) return null;\n\n    const getPosition = () => {\n      if (!triggerLayout) {\n        return {\n          left: WINDOW_WIDTH / 2 - contentSize.width / 2,\n          top: WINDOW_HEIGHT / 2 - contentSize.height / 2,\n        };\n      }\n\n      let left = 0;\n      let top = 0;\n\n      if (side === \"top\" || side === \"bottom\") {\n        if (align === \"start\") {\n          left = triggerLayout.x;\n        } else if (align === \"center\") {\n          left =\n            triggerLayout.x + triggerLayout.width / 2 - contentSize.width / 2;\n        } else if (align === \"end\") {\n          left = triggerLayout.x + triggerLayout.width - contentSize.width;\n        }\n      }\n\n      if (side === \"left\" || side === \"right\") {\n        if (align === \"start\") {\n          top = triggerLayout.y;\n        } else if (align === \"center\") {\n          top =\n            triggerLayout.y + triggerLayout.height / 2 - contentSize.height / 2;\n        } else if (align === \"end\") {\n          top = triggerLayout.y + triggerLayout.height - contentSize.height;\n        }\n      }\n\n      if (side === \"top\") {\n        top = triggerLayout.y - contentSize.height - sideOffset;\n      } else if (side === \"bottom\") {\n        top = triggerLayout.y + triggerLayout.height + sideOffset;\n      } else if (side === \"left\") {\n        left = triggerLayout.x - contentSize.width - sideOffset;\n      } else if (side === \"right\") {\n        left = triggerLayout.x + triggerLayout.width + sideOffset;\n      }\n\n      left = Math.max(\n        16,\n        Math.min(left, WINDOW_WIDTH - contentSize.width - 16)\n      );\n      top = Math.max(\n        50,\n        Math.min(top, WINDOW_HEIGHT - contentSize.height - 16)\n      );\n\n      return { left, top };\n    };\n\n    const getTransform = () => {\n      const scale = { scale: scaleAnim };\n\n      if (side === \"top\" || side === \"bottom\") {\n        return [scale, { translateY: offsetAnim }];\n      } else {\n        return [scale, { translateX: offsetAnim }];\n      }\n    };\n\n    return (\n      <Modal\n        visible={open}\n        transparent\n        animationType=\"none\"\n        statusBarTranslucent={true}\n        onRequestClose={handleClose}\n      >\n        <TouchableWithoutFeedback onPress={handleClose}>\n          <View style={StyleSheet.absoluteFill}>\n            <Animated.View\n              onLayout={handleContentLayout}\n              style={[\n                styles.tooltipContent,\n                getPosition(),\n                {\n                  maxWidth:\n                    side === \"left\" || side === \"right\"\n                      ? WINDOW_WIDTH / 3\n                      : WINDOW_WIDTH - 32,\n                  opacity: opacityAnim,\n                  transform: getTransform(),\n                },\n              ]}\n              className={cn(\n                \"rounded-md bg-primary px-4 py-2\",\n                \"min-w-[150px]\",\n                Platform.OS === \"ios\" ? \"ios:shadow-md\" : \"android:elevation-3\",\n                className\n              )}\n              {...props}\n            >\n              <View>\n                {typeof children === \"string\" ? (\n                  <Text className=\"text-primary-foreground text-sm font-medium\">\n                    {children}\n                  </Text>\n                ) : (\n                  children\n                )}\n              </View>\n            </Animated.View>\n          </View>\n        </TouchableWithoutFeedback>\n      </Modal>\n    );\n  }\n);\n\nTooltipContent.displayName = \"TooltipContent\";\n\nconst styles = StyleSheet.create({\n  tooltipContent: {\n    position: \"absolute\",\n    zIndex: 1000,\n  },\n});\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui"
    }
  ]
}