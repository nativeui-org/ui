{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sheet",
  "type": "registry:component",
  "title": "Sheet",
  "description": "A sheet component for React Native applications.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/sheet/sheet.tsx",
      "content": "import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Modal,\n  TouchableWithoutFeedback,\n  Platform,\n  Animated,\n  Dimensions,\n  StyleSheet,\n  Easing,\n  KeyboardAvoidingView,\n} from \"react-native\";\nimport { SafeAreaView, Edge } from \"react-native-safe-area-context\";\nimport { cn } from \"@/lib/utils\";\nimport { Feather } from \"@expo/vector-icons\";\n\n// Animation config constants\nconst ANIMATION = {\n  OPEN: {\n    BACKDROP_DURATION: 180,\n    SPRING_VELOCITY: 3,\n    SPRING_TENSION: 120,\n    SPRING_FRICTION: 22,\n  },\n  CLOSE: {\n    SPRING_FRICTION: 26,\n    SPRING_TENSION: 100,\n    SPRING_VELOCITY: 0.5,\n    BACKDROP_DURATION: 280,\n    BACKDROP_DELAY: 100,\n  },\n};\n\n// Sheet sizes based on platform guidelines\nconst SHEET_SIZES = {\n  SMALL: 0.3, // 30% of screen height\n  MEDIUM: 0.5, // 50% of screen height\n  LARGE: 0.7, // 70% of screen height\n  FULL: 0.9, // 90% of screen height\n};\n\nconst { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get(\"window\");\n\nexport type SheetSize = \"small\" | \"medium\" | \"large\" | \"full\" | number;\n\nconst resolveSheetSize = (size: SheetSize): number => {\n  if (typeof size === \"number\") return size;\n\n  switch (size) {\n    case \"small\":\n      return SHEET_SIZES.SMALL;\n    case \"medium\":\n      return SHEET_SIZES.MEDIUM;\n    case \"large\":\n      return SHEET_SIZES.LARGE;\n    case \"full\":\n      return SHEET_SIZES.FULL;\n    default:\n      return SHEET_SIZES.MEDIUM;\n  }\n};\n\ninterface SheetProps {\n  open: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n  size?: SheetSize;\n  side?: \"left\" | \"right\" | \"top\" | \"bottom\";\n  contentClassName?: string;\n  avoidKeyboard?: boolean;\n  closeOnBackdropPress?: boolean;\n  disableBackHandler?: boolean;\n}\n\ninterface SheetContextValue {\n  close: () => void;\n  isClosing: boolean;\n  isAnimating: boolean;\n  position: Animated.Value;\n}\n\nexport const SheetContext = React.createContext<SheetContextValue>({\n  close: () => { },\n  isClosing: false,\n  isAnimating: false,\n  position: new Animated.Value(0),\n});\n\nexport const useSheet = () => React.useContext(SheetContext);\n\nconst Sheet = React.forwardRef<View, SheetProps>(\n  (\n    {\n      open,\n      onClose,\n      children,\n      title,\n      description,\n      size = \"medium\",\n      side = \"right\",\n      contentClassName,\n      avoidKeyboard = true,\n      closeOnBackdropPress = true,\n      disableBackHandler = false,\n    },\n    ref\n  ) => {\n    const [isVisible, setIsVisible] = React.useState(false);\n    const sheetSize = React.useMemo(() => resolveSheetSize(size), [size]);\n\n    const translateValue = React.useRef(new Animated.Value(0)).current;\n    const backdropOpacity = React.useRef(new Animated.Value(0)).current;\n    const isClosing = React.useRef(false);\n    const isAnimating = React.useRef(false);\n    const hasInitializedOpen = React.useRef(false);\n\n    const getInitialPosition = () => {\n      switch (side) {\n        case \"left\":\n          return -SCREEN_WIDTH;\n        case \"right\":\n          return SCREEN_WIDTH;\n        case \"top\":\n          return -SCREEN_HEIGHT;\n        case \"bottom\":\n          return SCREEN_HEIGHT;\n        default:\n          return SCREEN_WIDTH;\n      }\n    };\n\n    const getTargetPosition = () => {\n      switch (side) {\n        case \"left\":\n        case \"right\":\n          return 0;\n        case \"top\":\n        case \"bottom\":\n          return 0;\n        default:\n          return 0;\n      }\n    };\n\n    const getSheetDimensions = () => {\n      switch (side) {\n        case \"left\":\n        case \"right\":\n          return {\n            width: SCREEN_WIDTH * sheetSize,\n            height: SCREEN_HEIGHT,\n          };\n        case \"top\":\n        case \"bottom\":\n          return {\n            width: SCREEN_WIDTH,\n            height: SCREEN_HEIGHT * sheetSize,\n          };\n        default:\n          return {\n            width: SCREEN_WIDTH * sheetSize,\n            height: SCREEN_HEIGHT,\n          };\n      }\n    };\n\n    const animateOpen = React.useCallback(() => {\n      if (isAnimating.current) {\n        translateValue.stopAnimation();\n        backdropOpacity.stopAnimation();\n      }\n\n      isAnimating.current = true;\n      translateValue.setValue(getInitialPosition());\n      backdropOpacity.setValue(0);\n      isClosing.current = false;\n\n      Animated.timing(backdropOpacity, {\n        toValue: 1,\n        duration: ANIMATION.OPEN.BACKDROP_DURATION,\n        useNativeDriver: true,\n        easing: Easing.out(Easing.ease),\n      }).start();\n\n      Animated.spring(translateValue, {\n        toValue: getTargetPosition(),\n        useNativeDriver: true,\n        velocity: ANIMATION.OPEN.SPRING_VELOCITY,\n        tension: ANIMATION.OPEN.SPRING_TENSION,\n        friction: ANIMATION.OPEN.SPRING_FRICTION,\n      }).start(() => {\n        isAnimating.current = false;\n      });\n    }, [backdropOpacity, translateValue]);\n\n    const animateClose = React.useCallback(() => {\n      if (isClosing.current) return;\n\n      isClosing.current = true;\n\n      if (isAnimating.current) {\n        translateValue.stopAnimation();\n        backdropOpacity.stopAnimation();\n      }\n\n      isAnimating.current = true;\n\n      Animated.spring(translateValue, {\n        toValue: getInitialPosition(),\n        useNativeDriver: true,\n        friction: ANIMATION.CLOSE.SPRING_FRICTION,\n        tension: ANIMATION.CLOSE.SPRING_TENSION,\n        velocity: ANIMATION.CLOSE.SPRING_VELOCITY,\n      }).start();\n\n      Animated.timing(backdropOpacity, {\n        toValue: 0,\n        duration: ANIMATION.CLOSE.BACKDROP_DURATION,\n        easing: Easing.out(Easing.ease),\n        useNativeDriver: true,\n        delay: ANIMATION.CLOSE.BACKDROP_DELAY,\n      }).start(() => {\n        requestAnimationFrame(() => {\n          setIsVisible(false);\n          isClosing.current = false;\n          isAnimating.current = false;\n          hasInitializedOpen.current = false;\n          onClose();\n        });\n      });\n    }, [backdropOpacity, translateValue, onClose]);\n\n    React.useEffect(() => {\n      if (open && !isVisible) {\n        setIsVisible(true);\n        return;\n      }\n\n      if (\n        open &&\n        isVisible &&\n        !hasInitializedOpen.current &&\n        !isClosing.current\n      ) {\n        animateOpen();\n        hasInitializedOpen.current = true;\n        return;\n      }\n\n      if (!open && isVisible && !isClosing.current) {\n        animateClose();\n      }\n    }, [open, isVisible, animateOpen, animateClose]);\n\n    const handleBackdropPress = React.useCallback(() => {\n      if (closeOnBackdropPress && !isClosing.current) {\n        animateClose();\n      }\n    }, [animateClose, closeOnBackdropPress]);\n\n    const contextValue = React.useMemo(\n      () => ({\n        close: animateClose,\n        isClosing: isClosing.current,\n        isAnimating: isAnimating.current,\n        position: translateValue,\n      }),\n      [animateClose, translateValue]\n    );\n\n    const getTransformStyle = () => {\n      switch (side) {\n        case \"left\":\n        case \"right\":\n          return { transform: [{ translateX: translateValue }] };\n        case \"top\":\n        case \"bottom\":\n          return { transform: [{ translateY: translateValue }] };\n        default:\n          return { transform: [{ translateX: translateValue }] };\n      }\n    };\n\n    const getSheetPosition = () => {\n      switch (side) {\n        case \"left\":\n          return \"left-0 top-0 bottom-0\";\n        case \"right\":\n          return \"right-0 top-0 bottom-0\";\n        case \"top\":\n          return \"top-0 left-0 right-0\";\n        case \"bottom\":\n          return \"bottom-0 left-0 right-0\";\n        default:\n          return \"right-0 top-0 bottom-0\";\n      }\n    };\n\n    const getSafeAreaEdges = (): Edge[] => {\n      switch (side) {\n        case \"left\":\n        case \"right\":\n          return [\"top\", \"bottom\"];\n        case \"top\":\n          return [\"top\", \"left\", \"right\"];\n        case \"bottom\":\n          return [\"bottom\", \"left\", \"right\"];\n        default:\n          return [\"top\", \"bottom\"];\n      }\n    };\n\n    const renderContent = React.useCallback(\n      () => (\n        <View className=\"flex-1\">\n          <Animated.View\n            style={[styles.backdrop, { opacity: backdropOpacity }]}\n          >\n            {closeOnBackdropPress && (\n              <TouchableWithoutFeedback onPress={handleBackdropPress}>\n                <View style={StyleSheet.absoluteFillObject} />\n              </TouchableWithoutFeedback>\n            )}\n          </Animated.View>\n\n          <Animated.View\n            style={[\n              styles.sheetContainer,\n              getTransformStyle(),\n              getSheetDimensions(),\n            ]}\n            className={cn(\n              \"absolute bg-popover\",\n              Platform.OS === \"ios\" ? \"ios:shadow-xl\" : \"android:elevation-24\",\n              getSheetPosition(),\n              contentClassName\n            )}\n          >\n            <SafeAreaView edges={getSafeAreaEdges()} className=\"flex-1\">\n              <View className=\"flex-1\">\n                <View className=\"flex-row items-center justify-between p-4 border-b border-border\">\n                  <View className=\"flex-1\">\n                    {title && (\n                      <Text className=\"text-lg font-semibold text-foreground\">\n                        {title}\n                      </Text>\n                    )}\n                    {description && (\n                      <Text className=\"text-sm text-muted-foreground mt-1\">\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <TouchableWithoutFeedback onPress={animateClose}>\n                    <View className=\"p-2 rounded-full bg-muted/50\">\n                      <Feather name=\"x\" size={20} color=\"#6B7280\" />\n                    </View>\n                  </TouchableWithoutFeedback>\n                </View>\n\n                <View ref={ref} className=\"flex-1\">\n                  {children}\n                </View>\n              </View>\n            </SafeAreaView>\n          </Animated.View>\n        </View>\n      ),\n      [\n        animateClose,\n        backdropOpacity,\n        closeOnBackdropPress,\n        contentClassName,\n        description,\n        title,\n        translateValue,\n        children,\n        ref,\n      ]\n    );\n\n    if (!isVisible) return null;\n\n    return (\n      <SheetContext.Provider value={contextValue}>\n        <Modal\n          visible={isVisible}\n          transparent\n          animationType=\"none\"\n          statusBarTranslucent\n          onRequestClose={disableBackHandler ? undefined : animateClose}\n        >\n          {avoidKeyboard && Platform.OS === \"ios\" ? (\n            <KeyboardAvoidingView\n              behavior=\"padding\"\n              style={{ flex: 1 }}\n              keyboardVerticalOffset={10}\n            >\n              {renderContent()}\n            </KeyboardAvoidingView>\n          ) : (\n            renderContent()\n          )}\n        </Modal>\n      </SheetContext.Provider>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n  },\n  sheetContainer: {\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: -3 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 24,\n  },\n});\n\nSheet.displayName = \"Sheet\";\n\nexport { Sheet };\n",
      "type": "registry:component"
    }
  ],
  "changelog": []
}